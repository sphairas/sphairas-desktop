/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.betula.admin.units.ticketui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Comparator;
import java.util.Date;
import java.util.Objects;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.apache.commons.lang3.StringUtils;
import org.jdesktop.swingx.renderer.DefaultListRenderer;
import org.jdesktop.swingx.renderer.StringValue;
import org.openide.WizardDescriptor;
import org.openide.util.ChangeSupport;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.thespheres.betula.admin.units.RemoteTicket;
import org.thespheres.ical.CalendarComponent;
import org.thespheres.ical.CalendarComponentProperty;
import org.thespheres.ical.InvalidComponentException;
import org.thespheres.ical.UID;
import org.thespheres.ical.util.IComponentUtilities;

@Messages({"CreateTicketComponentVisualPanel.step=Kalendereintrag festlegen",
    "CreateTicketComponentVisualPanel.time.message={0} ({1})"})
public final class CreateTicketComponentVisualPanel extends JPanel {

    final static DateTimeFormatter FORMAT = DateTimeFormatter.ofPattern("EE, d.M.yy HH:mm");
    final DefaultComboBoxModel<TicketEntry2> calEntryModel = new DefaultComboBoxModel<>();
    final DefaultComboBoxModel<Integer> priorityModel = new DefaultComboBoxModel<>(new Integer[]{null, 9, 5, 1});
    private final StringValue calEntryStringModel = o -> o instanceof TicketEntry2 ? ((TicketEntry2) o).message() : "";

    public CreateTicketComponentVisualPanel() {
        initComponents();
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(CreateTicketComponentVisualPanel.class, "CreateTicketComponentVisualPanel.step");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroup = new javax.swing.ButtonGroup();
        timeLabel = new javax.swing.JLabel();
        summaryLabel = new javax.swing.JLabel();
        datePicker = new org.jdesktop.swingx.JXDatePicker();
        bindToEventButton = new javax.swing.JRadioButton();
        bindToEventComboBox = new javax.swing.JComboBox();
        newEventButton = new javax.swing.JRadioButton();
        summaryTextField = new javax.swing.JTextField();
        dateLabel = new javax.swing.JLabel();
        categoriesTextField = new javax.swing.JTextField();
        categoriesLabel = new javax.swing.JLabel();
        priorityComboBox = new javax.swing.JComboBox();
        priorityLabel = new javax.swing.JLabel();
        timeSpinner = new javax.swing.JSpinner();

        org.openide.awt.Mnemonics.setLocalizedText(timeLabel, org.openide.util.NbBundle.getMessage(CreateTicketComponentVisualPanel.class, "CreateTicketComponentVisualPanel.timeLabel.text")); // NOI18N

        summaryLabel.setLabelFor(summaryTextField);
        org.openide.awt.Mnemonics.setLocalizedText(summaryLabel, org.openide.util.NbBundle.getMessage(CreateTicketComponentVisualPanel.class, "CreateTicketComponentVisualPanel.summaryLabel.text")); // NOI18N

        datePicker.setDate(new Date());

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, newEventButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), datePicker, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        buttonGroup.add(bindToEventButton);
        org.openide.awt.Mnemonics.setLocalizedText(bindToEventButton, org.openide.util.NbBundle.getMessage(CreateTicketComponentVisualPanel.class, "CreateTicketComponentVisualPanel.bindToEventButton.text")); // NOI18N

        bindToEventComboBox.setModel(calEntryModel);
        bindToEventComboBox.setRenderer(new DefaultListRenderer(calEntryStringModel));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, bindToEventButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), bindToEventComboBox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        buttonGroup.add(newEventButton);
        newEventButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(newEventButton, org.openide.util.NbBundle.getMessage(CreateTicketComponentVisualPanel.class, "CreateTicketComponentVisualPanel.newEventButton.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, newEventButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), summaryTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(dateLabel, org.openide.util.NbBundle.getMessage(CreateTicketComponentVisualPanel.class, "CreateTicketComponentVisualPanel.dateLabel.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, newEventButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), categoriesTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(categoriesLabel, org.openide.util.NbBundle.getMessage(CreateTicketComponentVisualPanel.class, "CreateTicketComponentVisualPanel.categoriesLabel.text")); // NOI18N

        priorityComboBox.setModel(priorityModel);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, newEventButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), priorityComboBox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        priorityLabel.setLabelFor(priorityComboBox);
        org.openide.awt.Mnemonics.setLocalizedText(priorityLabel, org.openide.util.NbBundle.getMessage(CreateTicketComponentVisualPanel.class, "CreateTicketComponentVisualPanel.priorityLabel.text")); // NOI18N

        timeSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(39600000L), null, null, java.util.Calendar.HOUR));
        timeSpinner.setEditor(new javax.swing.JSpinner.DateEditor(timeSpinner, "HH:mm"));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, newEventButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), timeSpinner, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bindToEventButton)
                            .addComponent(newEventButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bindToEventComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(summaryTextField)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(categoriesLabel)
                                .addGap(7, 7, 7)
                                .addComponent(categoriesTextField)
                                .addGap(18, 18, 18)
                                .addComponent(priorityLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(priorityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(summaryLabel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(dateLabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(timeLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 11, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bindToEventButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bindToEventComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(newEventButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(summaryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(summaryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateLabel)
                    .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeLabel))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(categoriesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoriesLabel)
                    .addComponent(priorityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priorityLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JRadioButton bindToEventButton;
    javax.swing.JComboBox bindToEventComboBox;
    javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JLabel categoriesLabel;
    javax.swing.JTextField categoriesTextField;
    private javax.swing.JLabel dateLabel;
    org.jdesktop.swingx.JXDatePicker datePicker;
    private javax.swing.JRadioButton newEventButton;
    javax.swing.JComboBox priorityComboBox;
    private javax.swing.JLabel priorityLabel;
    private javax.swing.JLabel summaryLabel;
    javax.swing.JTextField summaryTextField;
    private javax.swing.JLabel timeLabel;
    javax.swing.JSpinner timeSpinner;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    static class CreateTicketComponentWizardPanel2 implements WizardDescriptor.Panel<WizardDescriptor>, ActionListener, DocumentListener {

        private CreateTicketComponentVisualPanel component;
        private final String defaultCategories = "zeugnisse";
        private final ChangeSupport cSupport = new ChangeSupport(this);
        private boolean valid = false;

        @Override
        public CreateTicketComponentVisualPanel getComponent() {
            if (component == null) {
                component = new CreateTicketComponentVisualPanel();
            }
            return component;
        }

        @Override
        public HelpCtx getHelp() {
            // Show no Help button for this panel:
            return HelpCtx.DEFAULT_HELP;
            // If you have context help:
            // return new HelpCtx("help.key.here");
        }

        private void validate() {
            String summary = getSummary();
            boolean before = valid;
            if (isBindToEvent()) {
                valid = true;
            } else {
                valid = summary != null;
            }
            if (before != valid) {
                cSupport.fireChange();
            }
        }

        private boolean isBindToEvent() {
            CreateTicketComponentVisualPanel panel = getComponent();
            return panel.buttonGroup.getSelection().equals(panel.bindToEventButton.getModel());
        }

        private String getSummary() {
            CreateTicketComponentVisualPanel panel = getComponent();
            return StringUtils.trimToNull(panel.summaryTextField.getText());
        }

        @Override
        public boolean isValid() {
            return valid;

        }

        @Override
        public void addChangeListener(ChangeListener l) {
            cSupport.addChangeListener(l);
        }

        @Override
        public void removeChangeListener(ChangeListener l) {
            cSupport.removeChangeListener(l);
        }

        @Override
        public void readSettings(WizardDescriptor wiz) {
//            AbstractUnitOpenSupport uos = (AbstractUnitOpenSupport) wiz.getProperty(Iterators.PROP_UNITOPENSUPPORT);
            RemoteTicketModel2 model = (RemoteTicketModel2) wiz.getProperty(Iterators.PROP_REMOTETICKETMODEL);
            CreateTicketComponentVisualPanel panel = getComponent();
            panel.categoriesTextField.setText(defaultCategories);
            panel.categoriesTextField.setEditable(false);
            panel.calEntryModel.removeAllElements();
            if (model != null) {
                model.tickets().stream()
                        .map(RemoteTicket::getCalendar)
                        .filter(Objects::nonNull)
                        .map(TicketEntry2::new)
                        .distinct()
                        .filter(te -> te.getDtStart() == null || te.getDtStart().isAfter(LocalDateTime.now()))
                        .sorted(Comparator.nullsFirst(Comparator.comparing(TicketEntry2::getDtStart)))
                        .forEach(panel.calEntryModel::addElement);
            }
            final UID prefUID = (UID) wiz.getProperty(Iterators.PROP_ADDTOEVENTCOMPONENT_UID);
            if (prefUID != null) {
                for (int i = 0; i < panel.calEntryModel.getSize(); i++) {
                    final TicketEntry2 te = panel.calEntryModel.getElementAt(i);
                    if (te.uid.equals(prefUID)) {
                        panel.calEntryModel.setSelectedItem(te);
                        break;
                    }
                }
                panel.calEntryModel.setSelectedItem(prefUID);
            }
            panel.summaryTextField.getDocument().addDocumentListener(this);
            panel.bindToEventButton.addActionListener(this);
        }

        @Override
        public void storeSettings(WizardDescriptor wiz) {
            CreateTicketComponentVisualPanel panel = getComponent();
            panel.summaryTextField.getDocument().removeDocumentListener(this);
            panel.bindToEventButton.removeActionListener(this);
            if (isValid()) {
                wiz.putProperty(Iterators.PROP_ADDTOEVENT, isBindToEvent());
                TicketEntry2 te = (TicketEntry2) panel.calEntryModel.getSelectedItem();
                wiz.putProperty(Iterators.PROP_ADDTOEVENTCOMPONENT, te);
                wiz.putProperty(Iterators.PROP_NEWSUMMARY, getSummary());
                Date date = panel.datePicker.getDate();
                if (date != null) {
                    LocalDate ld = LocalDate.from(date.toInstant().atZone(ZoneId.systemDefault()));
                    Date time = (Date) panel.timeSpinner.getValue();
                    LocalTime lt = LocalTime.from(time.toInstant().atZone(ZoneId.systemDefault()));
                    LocalDateTime ldt = LocalDateTime.of(ld, lt);
                    wiz.putProperty(Iterators.PROP_NEWDATETIME, ldt);
                }
                String cat = StringUtils.trimToNull(panel.categoriesTextField.getText());
                wiz.putProperty(Iterators.PROP_NEWCAT, cat);
                Integer priority = (Integer) panel.priorityComboBox.getSelectedItem();
                wiz.putProperty(Iterators.PROP_NEWPRIO, priority);
            }
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            validate();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            validate();
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            validate();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            validate();
        }

    }

    static final class TicketEntry2 {

        private LocalDateTime dtStart;
        private final String summary;
        final UID uid;
        private String message;

        private TicketEntry2(CalendarComponent cc) {
            this.uid = cc.getUID();
            try {
                this.dtStart = IComponentUtilities.parseLocalDateTimeProperty(cc, CalendarComponentProperty.DTSTART);
            } catch (InvalidComponentException ex) {
                this.message = ex.getLocalizedMessage();
            }
            this.summary = cc.getAnyPropertyValue(CalendarComponentProperty.SUMMARY).orElse("NO SUMMARY!");
        }

        public LocalDateTime getDtStart() {
            return dtStart != null ? dtStart : LocalDateTime.now();
        }

        String message() {
            final String time = message != null ? message : FORMAT.format(dtStart);
            return NbBundle.getMessage(CreateTicketComponentVisualPanel.class, "CreateTicketComponentVisualPanel.time.message", summary, time);
        }

        @Override
        public int hashCode() {
            int hash = 7;
            return 47 * hash + Objects.hashCode(this.uid);
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final TicketEntry2 other = (TicketEntry2) obj;
            return Objects.equals(this.uid, other.uid);
        }

    }
}
