/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.betula.admin.units.ticketui;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.renderer.CheckBoxProvider;
import org.jdesktop.swingx.renderer.DefaultTableRenderer;
import org.jdesktop.swingx.renderer.StringValue;
import org.jdesktop.swingx.table.ColumnFactory;
import org.jdesktop.swingx.table.TableColumnExt;
import org.openide.WizardDescriptor;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.thespheres.betula.StudentId;
import org.thespheres.betula.admin.units.AbstractUnitOpenSupport;
import org.thespheres.betula.admin.units.RemoteStudent;

@NbBundle.Messages({"SetExemptedStudentsVisualPanel.step=Ausnahmen festlegen",
    "SetExemptedStudentsVisualPanel.headerValue.student=Schüler/Schülerin",
    "SetExemptedStudentsVisualPanel.info.noUnitOpenSupport=Keine oder mehr als eine Klasse ausgewählt."})
final class SetExemptedStudentsVisualPanel extends JPanel {

    private final Model model = new Model();

    SetExemptedStudentsVisualPanel() {
        initComponents();
        exStudsTable.setModel(model);
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(CreateTicketComponentVisualPanel.class, "SetExemptedStudentsVisualPanel.step");
    }

    void setStudents(List<RemoteStudent> students) {
        model.init(students);
    }

    void setExemptedStudents(StudentId[] list) {
        model.list.stream().filter(sv -> Arrays.stream(list).anyMatch(sv::equals)).forEach(sv -> sv.selected = true);
    }

    StudentId[] getExemptedStudents() {
        return model.list.stream().filter(sv -> sv.selected).map(sv -> sv.stud.getStudentId()).toArray(StudentId[]::new);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ticketsButtonGroup = new javax.swing.ButtonGroup();
        exStudsLabel = new javax.swing.JLabel();
        exStudsScrollPane = new javax.swing.JScrollPane();
        exStudsTable = new org.jdesktop.swingx.JXTable();

        org.openide.awt.Mnemonics.setLocalizedText(exStudsLabel, org.openide.util.NbBundle.getMessage(SetExemptedStudentsVisualPanel.class, "SetExemptedStudentsVisualPanel.exStudsLabel.text")); // NOI18N

        exStudsTable.setColumnFactory(new ColFactory());
        exStudsTable.setHorizontalScrollEnabled(true);
        exStudsScrollPane.setViewportView(exStudsTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(exStudsLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(exStudsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exStudsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exStudsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel exStudsLabel;
    private javax.swing.JScrollPane exStudsScrollPane;
    private org.jdesktop.swingx.JXTable exStudsTable;
    javax.swing.ButtonGroup ticketsButtonGroup;
    // End of variables declaration//GEN-END:variables

    private final class ColFactory extends ColumnFactory {

        private final StringValue studsStringValue = rs -> ((RemoteStudent) rs).getDirectoryName();

        @Override
        public void configureColumnWidths(JXTable table, TableColumnExt col) {
            int index = col.getModelIndex();
            switch (index) {
                case 0:
                    col.setMinWidth(16);
                    col.setMaxWidth(16);
                    break;
                default:
                    break;
            }
        }

        @Override
        public void configureTableColumn(TableModel model, TableColumnExt col) {
            int index = col.getModelIndex();
            if (index == 0) {
                col.setCellEditor(new DefaultCellEditor(new JCheckBox()));
                col.setCellRenderer(new DefaultTableRenderer(new CheckBoxProvider()));
            } else if (index == 1) {
                String header = NbBundle.getMessage(SetExemptedStudentsVisualPanel.class, "SetExemptedStudentsVisualPanel.headerValue.student");
                col.setHeaderValue(header);
                col.setCellRenderer(new DefaultTableRenderer(studsStringValue));
            }
        }
    }

    private final class Model extends AbstractTableModel {

        private final List<StudentValue> list = new ArrayList<>();

        private void init(final List<RemoteStudent> students) {
            list.clear();
            students.forEach(rs -> list.add(new StudentValue(rs)));
            fireTableStructureChanged();
        }

        @Override
        public int getRowCount() {
            return list.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 0;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return list.get(rowIndex).selected;
                case 1:
                    return list.get(rowIndex).stud;
                default:
                    return null;
            }
        }

        @Override
        public void setValueAt(Object value, int rowIndex, int columnIndex) {
            list.get(rowIndex).selected = (boolean) value;
        }

        private final class StudentValue {

            private final RemoteStudent stud;
            private boolean selected = false;

            private StudentValue(RemoteStudent rs) {
                this.stud = rs;
            }

        }

    }

    static class SetExemptedStudentsWizardPanel implements WizardDescriptor.Panel<WizardDescriptor> {

        private SetExemptedStudentsVisualPanel component;

        @Override
        public JComponent getComponent() {
            if (component == null) {
                component = new SetExemptedStudentsVisualPanel();
            }
            return component;
        }

        @Override
        public HelpCtx getHelp() {
            // Show no Help button for this panel:
            return HelpCtx.DEFAULT_HELP;
            // If you have context help:
            // return new HelpCtx("help.key.here");
        }

        @Override
        public boolean isValid() {
            return true;
        }

        @Override
        public void readSettings(WizardDescriptor wiz) {
            final SetExemptedStudentsVisualPanel cmp = (SetExemptedStudentsVisualPanel) getComponent();
            final AbstractUnitOpenSupport uos = (AbstractUnitOpenSupport) wiz.getProperty(Iterators.PROP_UNITOPENSUPPORT);
            List<RemoteStudent> students = Collections.EMPTY_LIST;
            if (uos != null) {
                try {
                    students = uos.getRemoteUnitsModel().getStudents();
                } catch (IOException ex) {
                    wiz.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, ex.getMessage());
                }
            } else {
                final String msg = NbBundle.getMessage(SetExemptedStudentsVisualPanel.class, "SetExemptedStudentsVisualPanel.info.noUnitOpenSupport");
                wiz.putProperty(WizardDescriptor.PROP_INFO_MESSAGE, msg);
            }
            cmp.setStudents(students);
            StudentId[] list = (StudentId[]) wiz.getProperty(Iterators.PROP_EXEMPTED_STUDENTS);
            if (list != null) {
                cmp.setExemptedStudents(list);
            }
        }

        @Override
        public void storeSettings(WizardDescriptor wiz) {
            SetExemptedStudentsVisualPanel cmp = (SetExemptedStudentsVisualPanel) getComponent();
            StudentId[] list = cmp.getExemptedStudents();
            if (list != null) {
                wiz.putProperty(Iterators.PROP_EXEMPTED_STUDENTS, list);
            }
        }

        @Override
        public void addChangeListener(ChangeListener l) {
        }

        @Override
        public void removeChangeListener(ChangeListener l) {
        }
    }
}
