/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.betula.admin.units.ticketui;

import java.io.IOException;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import org.jdesktop.swingx.renderer.DefaultListRenderer;
import org.jdesktop.swingx.renderer.StringValue;
import org.openide.WizardDescriptor;
import org.openide.util.ChangeSupport;
import org.openide.util.Exceptions;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.thespheres.betula.TermId;
import org.thespheres.betula.admin.units.AbstractUnitOpenSupport;
import org.thespheres.betula.services.IllegalAuthorityException;
import org.thespheres.betula.services.scheme.spi.Term;
import org.thespheres.betula.services.scheme.spi.TermNotFoundException;
import org.thespheres.betula.services.scheme.spi.TermSchedule;
import org.thespheres.betula.ui.util.LogLevel;

@NbBundle.Messages({"TicketConfigVisualPanel.step.name=Allgemein",
    "TicketConfigVisualPanel.message.noTerm=Kein Halbjahr gew√§hlt."})
class TicketConfigVisualPanel extends JPanel {

    private final TermModel termsModel;
    private final ChangeSupport cSupport = new ChangeSupport(this);

    @SuppressWarnings("LeakingThisInConstructor")
    public TicketConfigVisualPanel() {
        this.termsModel = new TermModel();
        initComponents();
        this.termsComboBox.setRenderer(new DefaultListRenderer(termsModel));
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(TicketConfigVisualPanel.class, "TicketConfigVisualPanel.step.name");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        termLabel = new javax.swing.JLabel();
        termsComboBox = new org.jdesktop.swingx.JXComboBox();

        org.openide.awt.Mnemonics.setLocalizedText(termLabel, org.openide.util.NbBundle.getMessage(TicketConfigVisualPanel.class, "TicketConfigVisualPanel.termLabel.text")); // NOI18N

        termsComboBox.setModel(termsModel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(termLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(termsComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(termLabel)
                    .addComponent(termsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel termLabel;
    private org.jdesktop.swingx.JXComboBox termsComboBox;
    // End of variables declaration//GEN-END:variables

    void store(WizardDescriptor d) {
        Term t = (Term) termsComboBox.getSelectedItem();
        d.putProperty(Iterators.SELECTED_TERM, t);
    }

    void read(WizardDescriptor settings) throws IOException {
        termsModel.init(settings);
    }

    private class TermModel extends DefaultComboBoxModel implements StringValue {

        private synchronized void init(WizardDescriptor wiz) throws IOException {
            AbstractUnitOpenSupport uos = (AbstractUnitOpenSupport) wiz.getProperty(Iterators.PROP_UNITOPENSUPPORT);
            Term term = (Term) wiz.getProperty(Iterators.SELECTED_TERM);
            TermSchedule ts = uos.findTermSchedule();
            initializeModel(ts, term);
        }

        private void initializeModel(final TermSchedule ts, Term set) {
            removeAllElements();
            Term ct = null;
            if (ts != null) {
                ct = ts.getCurrentTerm();
                TermId ctid = ct.getScheduledItemId();
                int id = ct.getScheduledItemId().getId();
                for (int i = id - 4; i++ <= id + 4;) {
                    Term add;
                    if (i == 0) {
                        add = ct;
                    } else {
                        TermId tid = new TermId(ctid.getAuthority(), i);
                        try {
                            add = ts.resolve(tid);
                        } catch (TermNotFoundException | IllegalAuthorityException ex) {
                            Logger.getLogger(TicketConfigVisualPanel.class.getName()).log(LogLevel.INFO_WARNING, ex.getMessage(), ex);
                            continue;
                        }
                    }
                    addElement(add);
                }
            }
            if (set == null) {
                set = ct;
            }
            setSelectedItem(set);
        }

        @Override
        public void setSelectedItem(Object sel) {
            super.setSelectedItem(sel);
            cSupport.fireChange();
        }

        @Override
        public String getString(Object o) {
            return o instanceof Term ? ((Term) o).getDisplayName() : " ";
        }
    }

    static class TicketConfigPanel implements WizardDescriptor.Panel<WizardDescriptor> {

        private TicketConfigVisualPanel component;
        private WizardDescriptor wizard;

        @Override
        public TicketConfigVisualPanel getComponent() {
            if (component == null) {
                component = new TicketConfigVisualPanel();
            }
            return component;
        }

        @Override
        public HelpCtx getHelp() {
            // Show no Help button for this panel:
            return HelpCtx.DEFAULT_HELP;
            // If you have context help:
            // return new HelpCtx("help.key.here");
        }

        @Override
        public boolean isValid() {
            final boolean valid = getComponent().termsModel.getSelectedItem() != null;
            if (!valid) {
                String msg = NbBundle.getMessage(TicketConfigVisualPanel.class, "TicketConfigVisualPanel.message.noTerm");
                wizard.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, msg);
            }
            return valid;
        }

        @Override
        public void addChangeListener(ChangeListener l) {
            getComponent().cSupport.addChangeListener(l);
        }

        @Override
        public void removeChangeListener(ChangeListener l) {
            getComponent().cSupport.removeChangeListener(l);
        }

        @Override
        public void readSettings(WizardDescriptor wiz) {
            try {
                getComponent().read(wiz);
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
            this.wizard = wiz;
        }

        @Override
        public void storeSettings(WizardDescriptor wiz) {
            getComponent().store(wiz);
            this.wizard = null;
        }

    }
}
