/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.betula.classtest.module2;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.Serializable;
import java.util.Arrays;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.UndoRedo;
import org.openide.loaders.DataObject;
import org.openide.nodes.Node;
import org.openide.util.*;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.thespheres.betula.assess.AssessmentContext;
import org.thespheres.betula.classtest.model.ClassroomTestEditor2;
import org.thespheres.betula.ui.util.UIUtilities;
import org.thespheres.betula.util.CollectionUtil;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.thespheres.betula.classtest.assess//Assess//EN",
        autostore = false)
@TopComponent.Description(preferredID = "AssessTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "org.thespheres.betula.classtest.module2.AssessTopComponent")
@ActionReference(path = "Menu/Window/betula-project-local-windows", position = 1300, separatorBefore = 1000, separatorAfter = 2000)
@TopComponent.OpenActionRegistration(displayName = "#AssessTopComponent.openAction.displayName",
        preferredID = "AssessTopComponent")
@NbBundle.Messages({
    "AssessTopComponent.openAction.displayName=Bewertung (Klassenarbeiten)",
    "AssessTopComponent.displayName.empty=Bewertung",
    "AssessTopComponent.displayName=Bewertung {0}",
    "AssessTopComponent.noContext.label=Bewertungseinstellungen"
})
public final class AssessTopComponent extends TopComponent implements PropertyChangeListener, Serializable {

    private final JLabel noContextLabel;
    private final UndoRedo.Manager undoredo = new UndoRedo.Manager();
    private AssessmentContext.CustomizerProvider current;

    @SuppressWarnings("OverridableMethodCallInConstructor")
    public AssessTopComponent() {
        initComponents();
        setToolTipText(NbBundle.getMessage(AssessTopComponent.class, "AssessTopComponent.displayName"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
        noContextLabel = new JLabel();
        noContextLabel.setHorizontalAlignment(SwingConstants.CENTER);
        noContextLabel.setText(NbBundle.getMessage(AssessTopComponent.class, "AssessTopComponent.noContext.label"));
        updateName(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());
        add(scrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public UndoRedo getUndoRedo() {
        return undoredo;
    }

    @Override
    public void componentShowing() {
        TopComponent.getRegistry().addPropertyChangeListener(this);
        initialize();
        requestVisible();
    }

    @Override
    public void componentClosed() {
        TopComponent.getRegistry().removePropertyChangeListener(this);
        removeComp();
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        switch (evt.getPropertyName()) {
            case TopComponent.Registry.PROP_ACTIVATED_NODES:
                initialize();
                break;
            case TopComponent.Registry.PROP_OPENED:
                long opened = TopComponent.getRegistry().getOpened().stream()
                        .flatMap(tc -> tc.getLookup().lookupAll(AssessmentContext.CustomizerProvider.class).stream())
                        .count();
                if (opened == 0) {
                    close();
                }
                break;
        }
    }

    private synchronized void initialize() {
        final ClassroomTestEditor2 editor = Arrays.stream(TopComponent.getRegistry().getActivatedNodes())
                .flatMap(node -> node.getLookup()
                        .lookupAll(ClassroomTestEditor2.class).stream())
                .collect(CollectionUtil.singleOrNull());
        AssessmentContext.CustomizerProvider provider = editor != null ? editor.getContext().lookup(AssessmentContext.CustomizerProvider.class) : null;
        Mutex.EVENT.writeAccess(() -> doRun(editor, provider));
    }

    private void doRun(ClassroomTestEditor2 editor, AssessmentContext.CustomizerProvider provider) {
        if (provider != null) {
            setComp(editor, provider);
        } else {
            removeComp();
        }
    }

    private void removeComp() {
        if (current != null) {
            current.removeUndoableEditListener(undoredo);
            current = null;
        }
        setActivatedNodes(new Node[]{});
        scrollPane.setViewportView(noContextLabel);
        updateName(null);
    }

    private void setComp(ClassroomTestEditor2 editor, AssessmentContext.CustomizerProvider provider) {
        if (current != null) {
            current.removeUndoableEditListener(undoredo);
        }
        Node[] nodes = WindowManager.getDefault().getRegistry().getActivatedNodes();
        setActivatedNodes(nodes);
        scrollPane.setViewportView(provider.getCustomizer());
        current = provider;
        provider.addUndoableEditListener(undoredo);
        updateName(editor);
    }

    private void updateName(ClassroomTestEditor2 ed) {
        if (ed == null) {
            setName(NbBundle.getMessage(AssessTopComponent.class, "AssessTopComponent.displayName.empty"));
        } else {
            String dn = UIUtilities.findDisplayName(ed.getContext().lookup(DataObject.class));
            setName(NbBundle.getMessage(AssessTopComponent.class, "AssessTopComponent.displayName", dn));
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
