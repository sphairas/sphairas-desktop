//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.3-b24-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2007.04.21 at 11:42:49 PM CEST 
//
package org.thespheres.betula.classtest.xml;

import java.util.Comparator;
import org.thespheres.betula.classtest.Assessable;
import org.thespheres.betula.classtest.Basket;
import java.util.SortedSet;
import java.util.TreeSet;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import org.thespheres.betula.classtest.Hierarchical;
import org.thespheres.betula.classtest.HierarchyExcpeption;

/**
 *
 * @author boris.heithecker
 */
@XmlAccessorType(XmlAccessType.FIELD)
public class XmlProblem implements Assessable.Problem, Basket<XmlProblem, XmlProblemRef>, Basket.Ref<Double>, Hierarchical {

    @XmlAttribute(name = "index")
    protected int index = 0;
    @XmlAttribute(name = "max-score", required = true)
    protected int maxscore;
//    @Deprecated
//    @XmlAttribute(name = "weight", required = true)
//    @XmlJavaTypeAdapter(Int2Adapter.class)
//    protected Int2 int2Weight;
    @XmlJavaTypeAdapter(LegacyConverter.class)
    @XmlAttribute(name = "weight", required = true)
    protected Double weight;
    @XmlElement(name = "display-name")
    protected String displayName;
    @XmlTransient
    protected final SortedSet<XmlProblemRef> refs = new TreeSet<>(Comparator.comparing(XmlProblemRef::getIndex));
    @XmlTransient
    private String id;
    @XmlAttribute(name = "parent")
    protected String parentId;

    public XmlProblem() {
    }

    public XmlProblem(String temporaryId, int index) {
        this.maxscore = 5;
        this.weight = 1.0d;
        this.id = temporaryId;
        this.index = index;
    }

    @Override
    public String getId() {
        return id;
    }

    @Override
    public int getMaxScore() {
        return maxscore;
    }

    @Override
    public void setMaxScore(int value) {
        this.maxscore = value;
    }

    @Override
    public Double getWeight() {
        return weight;
    }

    @Override
    public void setWeight(Double value) {
        this.weight = value;
    }

    @Override
    public String getDisplayName() {
        return displayName;
    }

    @Override
    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    @Override
    public int getIndex() {
        return index;
    }

    @Override
    public void setIndex(int index) {
        this.index = index;
    }

    @Override
    public String getParentId() {
        return parentId;
    }

    @Override
    public void moveTo(String parent) throws HierarchyExcpeption {
        this.parentId = parent;
    }

    @Override
    public SortedSet<XmlProblemRef> getReferences() {
        return refs;
    }

    @Override
    public XmlProblemRef getReference(final int position) {
        return refs.stream()
                .filter(xr -> xr.getIndex() == position)
                .findAny()
                .orElse(null);
    }

    @Override
    public XmlProblemRef getReference(final String id) {
        return refs.stream()
                .filter(xr -> xr.getId().equals(id))
                .findAny()
                .orElse(null);
    }

    @Override
    public XmlProblemRef addReference(XmlProblem ref) {
        return addReference(ref, refs.size());
    }

    @Override
    public XmlProblemRef addReference(XmlProblem ref, int position) {
        XmlProblemRef ret = new XmlProblemRef(ref, position);
        refs.add(ret);
        return ret;
    }

    @Override
    public boolean removeReference(String id) {
        for (XmlProblemRef r : refs) {
            if (r.getId().equals(id)) {
                return refs.remove(r);
            }
        }
        return false;
    }

}
