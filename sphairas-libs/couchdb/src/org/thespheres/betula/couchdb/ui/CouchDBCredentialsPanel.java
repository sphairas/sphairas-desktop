package org.thespheres.betula.couchdb.ui;

import java.util.regex.Pattern;
import javax.swing.JFormattedTextField;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.DefaultFormatter;
import org.apache.commons.lang3.StringUtils;

final class CouchDBCredentialsPanel extends JPanel {

    private final CouchDBCredentialsController controller;
    private final IservUsernameFormatter usernameFormatter = new IservUsernameFormatter();
    private final PasswortTextFieldListener pwListener = new PasswortTextFieldListener();
    private boolean passwordUserEdit;

    CouchDBCredentialsPanel(CouchDBCredentialsController controller) {
        this.controller = controller;
        initComponents();
        this.passwordField.getDocument().addDocumentListener(pwListener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userNameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        usernameTextField = new JFormattedTextField(usernameFormatter);
        dbNameLabel = new javax.swing.JLabel();
        dbNameTextField = new JFormattedTextField(usernameFormatter);

        org.openide.awt.Mnemonics.setLocalizedText(userNameLabel, org.openide.util.NbBundle.getMessage(CouchDBCredentialsPanel.class, "CouchDBCredentialsPanel.userNameLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(passwordLabel, org.openide.util.NbBundle.getMessage(CouchDBCredentialsPanel.class, "CouchDBCredentialsPanel.passwordLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(dbNameLabel, org.openide.util.NbBundle.getMessage(CouchDBCredentialsPanel.class, "CouchDBCredentialsPanel.dbNameLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userNameLabel)
                    .addComponent(passwordLabel)
                    .addComponent(dbNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                    .addComponent(passwordField)
                    .addComponent(dbNameTextField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dbNameLabel)
                    .addComponent(dbNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameLabel)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        dbNameTextField.setText(controller.loadCouchDBDatabase());
        usernameTextField.setText(controller.loadCouchDBUser());
        passwordField.setText(controller.hasStoredPassword() ? "password" : null);
        passwordField.selectAll();
        passwordUserEdit = false;
    }

    void store() {
        controller.storeCouchDBDatabase(StringUtils.trimToNull(dbNameTextField.getText()));
        controller.storeCouchDBUser(StringUtils.trimToNull(usernameTextField.getText()));
        if (passwordUserEdit) {
            controller.storeCouchDBPassword(passwordField.getPassword());
        }
    }

    boolean valid() {
        final boolean passwordValid = (controller.hasStoredPassword() && !passwordUserEdit) || passwordField.getPassword().length != 0;
        return usernameTextField.isEditValid() && passwordValid;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dbNameLabel;
    private javax.swing.JFormattedTextField dbNameTextField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JFormattedTextField usernameTextField;
    // End of variables declaration//GEN-END:variables

    private class IservUsernameFormatter extends DefaultFormatter implements DocumentListener {

        private JFormattedTextField jft;
        private final Pattern pattern = Pattern.compile("([\\w]+(-[\\w]+)*)");

        @Override
        public void install(JFormattedTextField ftf) {
            super.install(ftf);
            this.jft = ftf;
            this.jft.getDocument().addDocumentListener(this);
        }

        @Override
        public void uninstall() {
            super.uninstall();
            if (this.jft != null) {
                this.jft.getDocument().removeDocumentListener(this);
                this.jft = null;
            }
        }

        private void check() {
            String t = jft.getText();
            if (!pattern.matcher(t).matches()) {
                invalidEdit();
            }
            controller.changed();
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            check();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            check();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            check();
        }

    }

    private class PasswortTextFieldListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            passwordUserEdit = true;
            controller.changed();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            passwordUserEdit = true;
            controller.changed();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            passwordUserEdit = true;
            controller.changed();
        }

    }
}
