/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.betula.journal.module;

import org.thespheres.betula.journal.JournalConfiguration;
import java.awt.Font;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import org.jdesktop.swingx.JXComboBox;
import org.jdesktop.swingx.decorator.FontHighlighter;
import org.jdesktop.swingx.decorator.HighlightPredicate;
import org.jdesktop.swingx.renderer.DefaultListRenderer;
import org.jdesktop.swingx.renderer.StringValue;
import org.openide.WizardDescriptor;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.thespheres.betula.assess.AssessmentConvention;
import org.thespheres.betula.services.LocalFileProperties;

@Messages({"CreateJournalFileVisualPanel.name=Datei",
    "CreateJournalFileVisualPanel.chooseConvention.default=Kurseinstellung"})
final class CreateJournalFileVisualPanel extends JPanel {

    private final DefaultComboBoxModel<AssessmentConvention> conventionModel = new DefaultComboBoxModel<>();
    private final String nullConventionString = NbBundle.getMessage(CreateJournalFileVisualPanel.class, "CreateJournalFileVisualPanel.chooseConvention.default");
    private final StringValue contextStringValue = v -> v instanceof AssessmentConvention ? ((AssessmentConvention) v).getDisplayName() : nullConventionString;
    private final DateFormat[] datePickerFormats;
    private final static HighlightPredicate NULL_PREDICATE = (r, c) -> c.getValue() == null;

    public CreateJournalFileVisualPanel() {
        String pattern = NbBundle.getMessage(JournalConfiguration.class, "JournalFileConfiguration.datePickerFormat");
        datePickerFormats = new DateFormat[]{new SimpleDateFormat(pattern)};
        initComponents();
        final Font font = chooseContextCbx.getFont().deriveFont(Font.ITALIC);
        ((JXComboBox) chooseContextCbx).addHighlighter(new FontHighlighter(NULL_PREDICATE, font));
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(CreateJournalFileVisualPanel.class, "CreateJournalFileVisualPanel.name");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooseContextLbl = new javax.swing.JLabel();
        beginDatePicker = new org.jdesktop.swingx.JXDatePicker();
        periodLabel = new javax.swing.JLabel();
        endDatePicker = new org.jdesktop.swingx.JXDatePicker();
        endDateLabel = new javax.swing.JLabel();
        beginDateLabel = new javax.swing.JLabel();

        chooseContextLbl.setLabelFor(chooseContextCbx);
        org.openide.awt.Mnemonics.setLocalizedText(chooseContextLbl, org.openide.util.NbBundle.getMessage(CreateJournalFileVisualPanel.class, "CreateJournalFileVisualPanel.chooseContextLbl.text")); // NOI18N

        chooseContextCbx.setModel(conventionModel);
        chooseContextCbx.setRenderer(new DefaultListRenderer(contextStringValue));

        beginDatePicker.setFormats(datePickerFormats);
        beginDatePicker.setPreferredSize(new java.awt.Dimension(160, 23));

        periodLabel.setLabelFor(beginDatePicker);
        org.openide.awt.Mnemonics.setLocalizedText(periodLabel, org.openide.util.NbBundle.getMessage(CreateJournalFileVisualPanel.class, "CreateJournalFileVisualPanel.periodLabel.text")); // NOI18N

        endDatePicker.setFormats(datePickerFormats);
        endDatePicker.setPreferredSize(new java.awt.Dimension(160, 23));

        endDateLabel.setLabelFor(endDatePicker);
        org.openide.awt.Mnemonics.setLocalizedText(endDateLabel, org.openide.util.NbBundle.getMessage(CreateJournalFileVisualPanel.class, "CreateJournalFileVisualPanel.endDateLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(beginDateLabel, org.openide.util.NbBundle.getMessage(CreateJournalFileVisualPanel.class, "CreateJournalFileVisualPanel.beginDateLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(periodLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chooseContextLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(endDateLabel)
                            .addComponent(beginDateLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(beginDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                            .addComponent(endDatePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(chooseContextCbx, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(periodLabel)
                    .addComponent(beginDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(beginDateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseContextLbl)
                    .addComponent(chooseContextCbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(203, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel beginDateLabel;
    org.jdesktop.swingx.JXDatePicker beginDatePicker;
    final javax.swing.JComboBox chooseContextCbx = new JXComboBox();
    private javax.swing.JLabel chooseContextLbl;
    private javax.swing.JLabel endDateLabel;
    org.jdesktop.swingx.JXDatePicker endDatePicker;
    private javax.swing.JLabel periodLabel;
    // End of variables declaration//GEN-END:variables

    static class CreateJournalFilePanel implements WizardDescriptor.Panel<WizardDescriptor> {

        private CreateJournalFileVisualPanel component;

        // Get the visual component for the panel. In this template, the component
        // is kept separate. This can be more efficient: if the wizard is created
        // but never displayed, or not all panels are displayed, it is better to
        // create only those which really need to be visible.
        @Override
        public CreateJournalFileVisualPanel getComponent() {
            if (component == null) {
                component = new CreateJournalFileVisualPanel();
            }
            return component;
        }

        @Override
        public HelpCtx getHelp() {
            // Show no Help button for this panel:
            return HelpCtx.DEFAULT_HELP;
            // If you have context help:
            // return new HelpCtx("help.key.here");
        }

        @Override
        public boolean isValid() {
            return true;
            // If it is always OK to press Next or Finish, then:
//            return getComponent().beginDatePicker.getDate() != null && getComponent().endDatePicker.getDate() != null;
            // If it depends on some condition (form filled out...) and
            // this condition changes (last form field filled in...) then
            // use ChangeSupport to implement add/removeChangeListener below.
            // WizardDescriptor.ERROR/WARNING/INFORMATION_MESSAGE will also be useful.
        }

        @Override
        public void addChangeListener(ChangeListener l) {
        }

        @Override
        public void removeChangeListener(ChangeListener l) {
        }

        @Override
        public void readSettings(final WizardDescriptor wiz) {
            final LocalFileProperties props = (LocalFileProperties) wiz.getProperty(CreateJournalFileWizardIterator.PROP_LOCAL_FILE_PROPERTIES);
            final DefaultComboBoxModel<AssessmentConvention> boxModel = getComponent().conventionModel;
            boxModel.removeAllElements();
            if (props != null) {
                boxModel.addElement(null);
                Arrays.stream(props.getAssessmentConventions())
                        .forEach(boxModel::addElement);
            }
        }

        @Override
        public void storeSettings(final WizardDescriptor wiz) {
            wiz.putProperty(CreateJournalFileWizardIterator.PROP_BEGIN_DATE, getComponent().beginDatePicker.getDate());
            wiz.putProperty(CreateJournalFileWizardIterator.PROP_END_DATE, getComponent().endDatePicker.getDate());
            final AssessmentConvention ac = (AssessmentConvention) getComponent().conventionModel.getSelectedItem();
            final String convention = ac != null ? ac.getName() : null;
            wiz.putProperty(CreateJournalFileWizardIterator.PROP_PREFERRED_CONVENTION, convention);
        }

    }
}
