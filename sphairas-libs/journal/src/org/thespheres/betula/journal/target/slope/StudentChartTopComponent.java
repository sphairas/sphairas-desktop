/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.betula.journal.target.slope;

import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.chart.BarChart;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.Mutex;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.thespheres.betula.journal.model.EditableParticipant;
import org.thespheres.betula.util.CollectionUtil;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.thespheres.betula.journal.target.slope//StudentChart//EN",
        autostore = false)
@TopComponent.Description(preferredID = "StudentChartTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "markers", openAtStartup = false)
@ActionID(category = "Window", id = "org.thespheres.betula.journal.target.slope.StudentChartTopComponent")
@ActionReference(path = "Menu/Window/betula-project-local-windows", position = 1850)
@TopComponent.OpenActionRegistration(
        displayName = "#StudentChartTopComponent.openAction.displayName",
        preferredID = "StudentChartTopComponent")
@Messages({"StudentChartTopComponent.openAction.displayName=Statistik (Berichtsheft)",
    "StudentChartTopComponent.displayName.empty=Statistik",
    "StudentChartTopComponent.displayName=Statistik f√ºr {0}"})
public final class StudentChartTopComponent extends TopComponent implements PropertyChangeListener, LookupListener {

    private final JFXPanel chartFxPanel = new JFXPanel();
    private final Lookup.Result<EditableParticipant> result;
    private final StudentChartModel model = new StudentChartModel();

    public StudentChartTopComponent() {
        initComponents();
        add(chartFxPanel, BorderLayout.CENTER);
        updateName(null);
        result = Utilities.actionsGlobalContext().lookupResult(EditableParticipant.class);
        Platform.setImplicitExit(false);
        Platform.runLater(this::createScene);
    }

    private void createScene() {
        final BarChart chart = model.createBarChart();
        chartFxPanel.setScene(new Scene(chart));
//        browser = createBrowser();
//        browserFxPanel.setScene(new Scene(browser));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentShowing() {
        TopComponent.getRegistry().addPropertyChangeListener(this);
        result.addLookupListener(this);
        resultChanged(null);
    }

    @Override
    public void componentClosed() {
        TopComponent.getRegistry().removePropertyChangeListener(this);
        result.removeLookupListener(this);
    }

    private void updateName(final EditableParticipant current) {
        if (current == null) {
            setName(NbBundle.getMessage(StudentChartTopComponent.class, "StudentChartTopComponent.displayName.empty"));
        } else {
            setName(NbBundle.getMessage(StudentChartTopComponent.class, "StudentChartTopComponent.displayName", current.getFullname()));
        }
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        final EditableParticipant ep = result.allInstances().stream()
                .map(EditableParticipant.class::cast)
                .collect(CollectionUtil.singleOrNull());
        model.setCurrent(ep);
        Mutex.EVENT.postWriteRequest(() -> updateName(ep));
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (TopComponent.Registry.PROP_OPENED.equals(evt.getPropertyName())) { // && current != null) {
//            final boolean close = !TopComponent.getRegistry().getOpened().stream()
//                    .flatMap(tc -> tc.getLookup().lookupAll(ClassroomTestEditor2.class).stream())
//                    .anyMatch(current::equals);
//            if (close) {
//                current.getEditableClassroomTest().getEventBus().unregister(this);
//                current = null;
//                update();
//            }
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
