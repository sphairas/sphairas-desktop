/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.betula.project.ui.wizard;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.apache.commons.lang3.StringUtils;
import org.openide.WizardDescriptor;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.filesystems.FileUtil;
import org.openide.util.ChangeSupport;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;

@NbBundle.Messages({"SelectProjectLocationVisualPanel.name=Kursmappen-Ordner ausw√§hlen"})
class SelectProjectLocationVisualPanel extends JPanel implements DocumentListener, ActionListener {

    private final SelectProjectLocationPanel panel;

    @SuppressWarnings("LeakingThisInConstructor")
    public SelectProjectLocationVisualPanel(SelectProjectLocationPanel panel) {
        this.panel = panel;
        initComponents();
        projectNewFolderRadioButton.addActionListener(this);
        projectExistingFolderRadioButton.addActionListener(this);
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(SelectProjectLocationVisualPanel.class, "SelectProjectLocationVisualPanel.name");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        typeButtonGroup = new javax.swing.ButtonGroup();
        projectNewFolderPathLabel = new javax.swing.JLabel();
        projectNewFolderPathTextField = new javax.swing.JTextField();
        projectNewFolderPathBrowseButton = new javax.swing.JButton();
        projectNewFolderLabel = new javax.swing.JLabel();
        projectNewFolderTextField = new javax.swing.JTextField();
        projectExistingFolderRadioButton = new javax.swing.JRadioButton();
        projectNewFolderRadioButton = new javax.swing.JRadioButton();
        projectExistingFolderLabel = new javax.swing.JLabel();
        projectExistingFolderTextField = new javax.swing.JTextField();
        projectExistingFolderBrowseButton = new javax.swing.JButton();
        infoLabel = new org.jdesktop.swingx.JXLabel();

        projectNewFolderPathLabel.setLabelFor(projectNewFolderPathTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectNewFolderPathLabel, org.openide.util.NbBundle.getMessage(SelectProjectLocationVisualPanel.class, "SelectProjectLocationVisualPanel.projectNewFolderPathLabel.text")); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, projectNewFolderRadioButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), projectNewFolderPathTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(projectNewFolderPathBrowseButton, org.openide.util.NbBundle.getMessage(SelectProjectLocationVisualPanel.class, "SelectProjectLocationVisualPanel.projectNewFolderPathBrowseButton.text")); // NOI18N
        projectNewFolderPathBrowseButton.setActionCommand(org.openide.util.NbBundle.getMessage(SelectProjectLocationVisualPanel.class, "SelectProjectLocationVisualPanel.projectNewFolderPathBrowseButton.actionCommand")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, projectNewFolderRadioButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), projectNewFolderPathBrowseButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        projectNewFolderPathBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectNewFolderPathBrowseButtonActionPerformed(evt);
            }
        });

        projectNewFolderLabel.setLabelFor(projectNewFolderTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectNewFolderLabel, org.openide.util.NbBundle.getMessage(SelectProjectLocationVisualPanel.class, "SelectProjectLocationVisualPanel.projectNewFolderLabel.text")); // NOI18N

        projectNewFolderTextField.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, projectNewFolderRadioButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), projectNewFolderTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        typeButtonGroup.add(projectExistingFolderRadioButton);
        projectExistingFolderRadioButton.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        projectExistingFolderRadioButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(projectExistingFolderRadioButton, org.openide.util.NbBundle.getMessage(SelectProjectLocationVisualPanel.class, "SelectProjectLocationVisualPanel.projectExistingFolderRadioButton.text")); // NOI18N

        typeButtonGroup.add(projectNewFolderRadioButton);
        projectNewFolderRadioButton.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(projectNewFolderRadioButton, org.openide.util.NbBundle.getMessage(SelectProjectLocationVisualPanel.class, "SelectProjectLocationVisualPanel.projectNewFolderRadioButton.text")); // NOI18N

        projectExistingFolderLabel.setLabelFor(projectExistingFolderTextField);
        org.openide.awt.Mnemonics.setLocalizedText(projectExistingFolderLabel, org.openide.util.NbBundle.getMessage(SelectProjectLocationVisualPanel.class, "SelectProjectLocationVisualPanel.projectExistingFolderLabel.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, projectExistingFolderRadioButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), projectExistingFolderTextField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(projectExistingFolderBrowseButton, org.openide.util.NbBundle.getMessage(SelectProjectLocationVisualPanel.class, "SelectProjectLocationVisualPanel.projectExistingFolderBrowseButton.text")); // NOI18N
        projectExistingFolderBrowseButton.setActionCommand(org.openide.util.NbBundle.getMessage(SelectProjectLocationVisualPanel.class, "SelectProjectLocationVisualPanel.projectExistingFolderBrowseButton.actionCommand")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, projectExistingFolderRadioButton, org.jdesktop.beansbinding.ELProperty.create("${selected}"), projectExistingFolderBrowseButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        projectExistingFolderBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectExistingFolderBrowseButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(infoLabel, org.openide.util.NbBundle.getMessage(SelectProjectLocationVisualPanel.class, "SelectProjectLocationVisualPanel.infoLabel.text")); // NOI18N
        infoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        infoLabel.setLineWrap(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(projectNewFolderLabel)
                                    .addComponent(projectNewFolderPathLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(projectNewFolderPathTextField)
                                    .addComponent(projectNewFolderTextField)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(projectExistingFolderLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(projectExistingFolderTextField)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(projectNewFolderPathBrowseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                            .addComponent(projectExistingFolderBrowseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projectExistingFolderRadioButton)
                            .addComponent(projectNewFolderRadioButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(projectExistingFolderRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(projectExistingFolderBrowseButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(projectExistingFolderLabel)
                        .addComponent(projectExistingFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(projectNewFolderRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectNewFolderPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(projectNewFolderPathBrowseButton)
                    .addComponent(projectNewFolderPathLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectNewFolderLabel)
                    .addComponent(projectNewFolderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(infoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                .addContainerGap())
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    @NbBundle.Messages({"SelectProjectLocationVisualPanel.projectNewFolderPathBrowser.title=√úbergeordneten Ordner w√§hlen"})
    private void projectNewFolderPathBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectNewFolderPathBrowseButtonActionPerformed
        String command = evt.getActionCommand();
        if ("BROWSE".equals(command)) {
            File home = new File(System.getProperty("user.home"));
            String title = NbBundle.getMessage(SelectProjectLocationVisualPanel.class, "SelectProjectLocationVisualPanel.projectNewFolderPathBrowser.title");
            FileChooserBuilder fcb = new FileChooserBuilder(SelectProjectLocationVisualPanel.class);
            fcb.setTitle(title).setDefaultWorkingDirectory(home).setDirectoriesOnly(true).setFileHiding(true);
            File folder = fcb.showOpenDialog();
            if (folder != null) {
                projectNewFolderPathTextField.setText(FileUtil.normalizeFile(folder).getAbsolutePath());
            }
            setPath();
        }
    }//GEN-LAST:event_projectNewFolderPathBrowseButtonActionPerformed

    @NbBundle.Messages({"SelectProjectLocationVisualPanel.projectExistingFolderPathBrowser.title=Existierenden Ordner w√§hlen"})
    private void projectExistingFolderBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectExistingFolderBrowseButtonActionPerformed
        String command = evt.getActionCommand();
        if ("BROWSE".equals(command)) {
            File home = new File(System.getProperty("user.home"));
            String title = NbBundle.getMessage(SelectProjectLocationVisualPanel.class, "SelectProjectLocationVisualPanel.projectExistingFolderPathBrowser.title");
            FileChooserBuilder fcb = new FileChooserBuilder(SelectProjectLocationVisualPanel.class);
            fcb.setTitle(title).setDefaultWorkingDirectory(home).setDirectoriesOnly(true).setFileHiding(true);
            File folder = fcb.showOpenDialog();
            if (folder != null) {
                projectExistingFolderTextField.setText(FileUtil.normalizeFile(folder).getAbsolutePath());
            }
            setPath();
        }
    }//GEN-LAST:event_projectExistingFolderBrowseButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXLabel infoLabel;
    private javax.swing.JButton projectExistingFolderBrowseButton;
    private javax.swing.JLabel projectExistingFolderLabel;
    private javax.swing.JRadioButton projectExistingFolderRadioButton;
    private javax.swing.JTextField projectExistingFolderTextField;
    private javax.swing.JLabel projectNewFolderLabel;
    private javax.swing.JButton projectNewFolderPathBrowseButton;
    private javax.swing.JLabel projectNewFolderPathLabel;
    private javax.swing.JTextField projectNewFolderPathTextField;
    private javax.swing.JRadioButton projectNewFolderRadioButton;
    private javax.swing.JTextField projectNewFolderTextField;
    private javax.swing.ButtonGroup typeButtonGroup;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addNotify() {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        projectNewFolderTextField.requestFocus();
    }

    void store(WizardDescriptor d) {
        projectNewFolderTextField.getDocument().removeDocumentListener(this);
        d.putProperty(BetulaProjectWizardIterator.PROP_USE_EXISTING_FOLDER, projectExistingFolderRadioButton.isSelected());
        d.putProperty("SelectProjectLocationVisualPanel.projectExistingFolderTextField", projectExistingFolderTextField.getText());
        d.putProperty("SelectProjectLocationVisualPanel.projectNewFolderTextField", projectNewFolderTextField.getText());
        d.putProperty("SelectProjectLocationVisualPanel.projectNewFolderPathTextField", projectNewFolderPathTextField.getText());
    }

    void read(WizardDescriptor settings) {
        Boolean usex = (Boolean) settings.getProperty(BetulaProjectWizardIterator.PROP_USE_EXISTING_FOLDER);
        if (usex != null) {
            projectNewFolderRadioButton.setSelected(!usex);
        }
        String ef = (String) settings.getProperty("SelectProjectLocationVisualPanel.projectExistingFolderTextField");
        if (ef != null) {
            projectExistingFolderTextField.setText(ef);
        }
        String nf = (String) settings.getProperty("SelectProjectLocationVisualPanel.projectNewFolderTextField");
        if (nf != null) {
            projectNewFolderTextField.setText(nf);
        }
        String nfp = (String) settings.getProperty("SelectProjectLocationVisualPanel.projectNewFolderPathTextField");
        if (nfp != null) {
            projectNewFolderPathTextField.setText(nfp);
            projectNewFolderTextField.setEditable(true);
        } else {
            projectNewFolderTextField.setEditable(false);
        }
        setPath();
        projectNewFolderTextField.getDocument().addDocumentListener(this);
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        setPath();
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        setPath();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        setPath();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        setPath();
    }

    @NbBundle.Messages({"SelectProjectLocationVisualPanel.path.error.exists=Der Ordner existiert bereits.",
        "SelectProjectLocationVisualPanel.path.error.notexists=Der Ordner existiert nicht.",
        "SelectProjectLocationVisualPanel.path.error.notdirectory=Kein Verzeichnis",
        "SelectProjectLocationVisualPanel.path.error.notwritable=Keine Schreibrechte"})
    private void setPath() {
        try {
            if (projectNewFolderRadioButton.isSelected()) {
                String projectName = StringUtils.trimToNull(projectNewFolderTextField.getText());
                String projectFolder = StringUtils.trimToNull(projectNewFolderPathTextField.getText());
                if (projectFolder != null) {
                    projectNewFolderTextField.setEditable(true);
                    if (projectName != null) {
                        Path p = Paths.get(projectFolder, projectName);
                        if (Files.exists(p)) {
                            final String msg = NbBundle.getMessage(SelectProjectLocationVisualPanel.class, "SelectProjectLocationVisualPanel.path.error.exists");
                            panel.setPathOrMessage(msg);
                        } else {
                            panel.setPathOrMessage(p);
                        }
                    } else {
                        panel.setPathOrMessage("");
                    }
                } else {
                    projectNewFolderTextField.setEditable(false);
                    panel.setPathOrMessage("");
                }
            } else {
                String projectFolder = StringUtils.trimToNull(projectExistingFolderTextField.getText());
                if (projectFolder == null) {
                    panel.setPathOrMessage("");
                } else {
                    Path p = Paths.get(projectFolder);
                    if (!Files.exists(p)) {
                        final String msg = NbBundle.getMessage(SelectProjectLocationVisualPanel.class, "SelectProjectLocationVisualPanel.path.error.notexists");
                        panel.setPathOrMessage(msg);
                    } else if (!Files.isDirectory(p)) {
                        final String msg = NbBundle.getMessage(SelectProjectLocationVisualPanel.class, "SelectProjectLocationVisualPanel.path.error.notdirectory");
                        panel.setPathOrMessage(msg);
                    } else if (!Files.isWritable(p)) {
                        final String msg = NbBundle.getMessage(SelectProjectLocationVisualPanel.class, "SelectProjectLocationVisualPanel.path.error.notwritable");
                        panel.setPathOrMessage(msg);
                    } else {
                        panel.setPathOrMessage(p);
                    }
                }
            }
        } catch (InvalidPathException ex) {
            panel.setPathOrMessage(ex.getLocalizedMessage());
        }
    }

    static class SelectProjectLocationPanel implements WizardDescriptor.Panel<WizardDescriptor> {

        private SelectProjectLocationVisualPanel component;
        private final ChangeSupport cSupport = new ChangeSupport(this);
        private WizardDescriptor wizard;
        private Path validPath;

        SelectProjectLocationPanel() {
        }

        @Override
        public SelectProjectLocationVisualPanel getComponent() {
            if (component == null) {
                component = new SelectProjectLocationVisualPanel(this);
            }
            return component;
        }

        @Override
        public HelpCtx getHelp() {
            return new HelpCtx("org.thespheres.betula.project.local.wizard.BetulaProjectWizardPanel");
        }

        @Override
        public boolean isValid() {
            return validPath != null;
        }

        private void setPathOrMessage(Object o) {
            String message = null;
            if (o instanceof Path) {
                validPath = (Path) o;
                message = "";

            } else if (o instanceof String) {
                validPath = null;
                message = (String) o;
            }
            if (wizard != null) {
                wizard.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, message);
            }
            cSupport.fireChange();
        }

        @Override
        public final void addChangeListener(ChangeListener l) {
            cSupport.addChangeListener(l);
        }

        @Override
        public final void removeChangeListener(ChangeListener l) {
            cSupport.removeChangeListener(l);
        }

        @Override
        public void readSettings(WizardDescriptor settings) {
            wizard = settings;
            getComponent().read(settings);
        }

        @Override
        public void storeSettings(WizardDescriptor settings) {
            getComponent().store(settings);
            settings.putProperty(BetulaProjectWizardIterator.PROP_PROJECT_PATH, validPath);
            wizard = null;
        }
    }
}
