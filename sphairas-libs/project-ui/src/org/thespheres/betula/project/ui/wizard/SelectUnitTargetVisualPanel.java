/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.betula.project.ui.wizard;

import java.awt.EventQueue;
import java.util.Objects;
import java.util.Properties;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import org.jdesktop.swingx.renderer.*;
import org.openide.WizardDescriptor;
import org.openide.util.ChangeSupport;
import org.openide.util.HelpCtx;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.thespheres.betula.project.BetulaProjectConfigurator;
import org.thespheres.betula.project.BetulaProjectType;
import org.thespheres.betula.project.UnitTargetProjectTemplate;
import org.thespheres.betula.project.UnitTargetProjectTemplate.UnitTargetSelection;

@Messages({"SelectUnitTargetVisualPanel.name=Gruppe/Liste ausw√§hlen"})
class SelectUnitTargetVisualPanel extends JPanel {

    private final TargetUnitModel unitModel = new TargetUnitModel();
    private final DefaultComboBoxModel<UnitTargetProjectTemplate> providerModel = new DefaultComboBoxModel<>();
    private final StringValue providerStringValue = v -> v instanceof UnitTargetProjectTemplate ? ((UnitTargetProjectTemplate) v).getProviderInfo().getDisplayName() : " ";
    private final StringValue unitStringValue = v -> v instanceof UnitTargetSelection ? ((UnitTargetSelection) v).getDisplayName() : " ";
    private final SelectUnitTargetPanel panel;
    private boolean reading = false;

    @SuppressWarnings("LeakingThisInConstructor")
    private SelectUnitTargetVisualPanel(SelectUnitTargetPanel p) {
        panel = p;
        providerModel.addElement(null);
        initComponents();
        providerComboBox.setRenderer(new DefaultListRenderer(providerStringValue));
        unitTargetComboBox.setRenderer(new DefaultListRenderer(unitStringValue));
    }

    private void initSelectProviderEnabled() {
        if (providerModel.getSize() == 1) {//only null element present
            localProjectRadioButton.setSelected(true);
            localProjectRadioButton.setEnabled(false);
            fromProviderRadioButton.setEnabled(false);
        }
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(SelectUnitTargetPanel.class, "SelectUnitTargetVisualPanel.name");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        typeButtonGroup = new javax.swing.ButtonGroup();
        unitTargetLabel = new javax.swing.JLabel();
        unitTargetComboBox = new org.jdesktop.swingx.JXComboBox();
        projectProviderLabel = new javax.swing.JLabel();
        providerComboBox = new org.jdesktop.swingx.JXComboBox();
        fromProviderRadioButton = new javax.swing.JRadioButton();
        localProjectRadioButton = new javax.swing.JRadioButton();
        fromProviderInfoLabel = new org.jdesktop.swingx.JXLabel();
        localProjectInfoLabel = new org.jdesktop.swingx.JXLabel();

        unitTargetLabel.setLabelFor(unitTargetComboBox);
        org.openide.awt.Mnemonics.setLocalizedText(unitTargetLabel, org.openide.util.NbBundle.getMessage(SelectUnitTargetVisualPanel.class, "SelectUnitTargetVisualPanel.unitTargetLabel.text")); // NOI18N

        unitTargetComboBox.setModel(unitModel);
        unitTargetComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onUnitTargetSelected(evt);
            }
        });

        projectProviderLabel.setLabelFor(unitTargetLabel);
        org.openide.awt.Mnemonics.setLocalizedText(projectProviderLabel, org.openide.util.NbBundle.getMessage(SelectUnitTargetVisualPanel.class, "SelectUnitTargetVisualPanel.projectProviderLabel.text")); // NOI18N

        providerComboBox.setModel(providerModel);
        providerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSelectProvider(evt);
            }
        });

        typeButtonGroup.add(fromProviderRadioButton);
        fromProviderRadioButton.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        fromProviderRadioButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(fromProviderRadioButton, org.openide.util.NbBundle.getMessage(SelectUnitTargetVisualPanel.class, "SelectUnitTargetVisualPanel.fromProviderRadioButton.text")); // NOI18N

        typeButtonGroup.add(localProjectRadioButton);
        localProjectRadioButton.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(localProjectRadioButton, org.openide.util.NbBundle.getMessage(SelectUnitTargetVisualPanel.class, "SelectUnitTargetVisualPanel.localProjectRadioButton.text")); // NOI18N
        localProjectRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSourceChange(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(fromProviderInfoLabel, org.openide.util.NbBundle.getMessage(SelectUnitTargetVisualPanel.class, "SelectUnitTargetVisualPanel.fromProviderInfoLabel.text")); // NOI18N
        fromProviderInfoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        fromProviderInfoLabel.setLineWrap(true);
        fromProviderInfoLabel.setPreferredSize(new java.awt.Dimension(300, 12));

        org.openide.awt.Mnemonics.setLocalizedText(localProjectInfoLabel, org.openide.util.NbBundle.getMessage(SelectUnitTargetVisualPanel.class, "SelectUnitTargetVisualPanel.localProjectInfoLabel.text")); // NOI18N
        localProjectInfoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        localProjectInfoLabel.setLineWrap(true);
        localProjectInfoLabel.setPreferredSize(new java.awt.Dimension(300, 12));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fromProviderInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(localProjectInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fromProviderRadioButton)
                            .addComponent(localProjectRadioButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(unitTargetLabel)
                            .addComponent(projectProviderLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(providerComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(unitTargetComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fromProviderRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectProviderLabel)
                    .addComponent(providerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unitTargetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unitTargetLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fromProviderInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(localProjectRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(localProjectInfoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void onSelectProvider(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSelectProvider
        if (!reading) {
            final UnitTargetProjectTemplate sel = (UnitTargetProjectTemplate) providerComboBox.getSelectedItem();
            EventQueue.invokeLater(() -> unitModel.updateSelectedProvider(panel.properties, sel));
        }
    }//GEN-LAST:event_onSelectProvider

    private void onUnitTargetSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onUnitTargetSelected
        if (!reading) {
            final UnitTargetSelection ut = (UnitTargetSelection) unitModel.getSelectedItem();
//        UnitTargetProjectTemplate t = (UnitTargetProjectTemplate) current.getProperty(BetulaProjectWizardIterator.PROP_TEMPLATE);
//        if (unitModel.template != null) {
//            unitModel.template.setUnitTarget(ut);
//        }
            panel.updateValid();
        }
    }//GEN-LAST:event_onUnitTargetSelected

    private void onSourceChange(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSourceChange
        panel.updateValid();
    }//GEN-LAST:event_onSourceChange

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXLabel fromProviderInfoLabel;
    javax.swing.JRadioButton fromProviderRadioButton;
    private org.jdesktop.swingx.JXLabel localProjectInfoLabel;
    javax.swing.JRadioButton localProjectRadioButton;
    private javax.swing.JLabel projectProviderLabel;
    org.jdesktop.swingx.JXComboBox providerComboBox;
    private javax.swing.ButtonGroup typeButtonGroup;
    org.jdesktop.swingx.JXComboBox unitTargetComboBox;
    private javax.swing.JLabel unitTargetLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addNotify() {
        super.addNotify();
        providerComboBox.requestFocus();
    }

    private void read(WizardDescriptor settings) {
        this.reading = true;
        BetulaProjectType t = (BetulaProjectType) settings.getProperty(BetulaProjectWizardIterator.PROP_TYPE);
        if (t != null && fromProviderRadioButton.isEnabled()) {
            fromProviderRadioButton.setSelected(t.equals(BetulaProjectType.PROVIDER));
        }
//        final BetulaProjectConfigurator c = (BetulaProjectConfigurator) settings.getProperty(BetulaProjectWizardIterator.PROP_CONFIGURATOR);
//        providerComboBox.setSelectedItem(c);
        final Properties p = (Properties) settings.getProperty(BetulaProjectWizardIterator.PROP_PROPERTIES);
        providerModel.removeAllElements();
        providerModel.addElement(null);
        Lookup.getDefault().lookupAll(BetulaProjectConfigurator.class).stream()
                .map(c -> c.createProjectTemplate(p))
                .filter(Objects::nonNull)
                .forEach(providerModel::addElement);
        initSelectProviderEnabled();
        final UnitTargetProjectTemplate tp = (UnitTargetProjectTemplate) settings.getProperty(BetulaProjectWizardIterator.PROP_TEMPLATE);
        if (tp != null) {
            unitModel.setSelectedItem(tp);
        }
        panel.updateValid();
        this.reading = false;
    }

    private void store(WizardDescriptor settings) {
//        BetulaProjectConfigurator sel = (BetulaProjectConfigurator) providerComboBox.getSelectedItem();
//        settings.putProperty(BetulaProjectWizardIterator.PROP_CONFIGURATOR, sel);
        settings.putProperty(BetulaProjectWizardIterator.PROP_TYPE, fromProviderRadioButton.isSelected() ? BetulaProjectType.PROVIDER : BetulaProjectType.LOCAL);
        settings.putProperty(BetulaProjectWizardIterator.PROP_TEMPLATE, (UnitTargetSelection) unitModel.getSelectedItem());
    }

    static class SelectUnitTargetPanel implements WizardDescriptor.Panel<WizardDescriptor> {

        private SelectUnitTargetVisualPanel component;
        private final ChangeSupport cSupport = new ChangeSupport(this);
        private boolean valid = false;
        private Properties properties;

        SelectUnitTargetPanel() {
        }

        @Override
        public SelectUnitTargetVisualPanel getComponent() {
            if (component == null) {
                component = new SelectUnitTargetVisualPanel(this);
            }
            return component;
        }

        @Override
        public HelpCtx getHelp() {
            return new HelpCtx("org.thespheres.betula.project.local.wizard.BetulaProjectWizardPanel");
        }

        @Override
        public boolean isValid() {
            return valid;
        }

        private void updateValid() {
            boolean v = true;
            if (getComponent().fromProviderRadioButton.isSelected()) {
                v = getComponent().providerComboBox.getSelectedItem() != null
                        && getComponent().unitModel.getSelectedItem() != null;
            }
            boolean changed = v != valid;
            if (changed) {
                valid = v;
                cSupport.fireChange();
            }
        }

        @Override
        public final void addChangeListener(ChangeListener l) {
            cSupport.addChangeListener(l);
        }

        @Override
        public final void removeChangeListener(ChangeListener l) {
            cSupport.removeChangeListener(l);
        }

        @Override
        public void readSettings(WizardDescriptor settings) {
            properties = (Properties) settings.getProperty(BetulaProjectWizardIterator.PROP_PROPERTIES);
            getComponent().read(settings);
        }

        @Override
        public void storeSettings(WizardDescriptor settings) {
            getComponent().store(settings);
            properties = null;
        }

    }
}
