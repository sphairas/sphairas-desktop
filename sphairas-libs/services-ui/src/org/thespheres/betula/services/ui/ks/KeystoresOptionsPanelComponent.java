/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.betula.services.ui.ks;

import java.awt.EventQueue;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.util.Arrays;
import java.util.Date;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.api.keyring.Keyring;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.util.RequestProcessor;
import org.thespheres.betula.services.ui.KeyStores;

/**
 *
 * @author boris.heithecker
 */
class KeystoresOptionsPanelComponent extends javax.swing.JPanel implements Runnable {

    private final DocListener oldPWListener;
    private final DocListener newPWListener;
    private final KeystoresOptionsPanelController controller;
    private final RequestProcessor RP = new RequestProcessor(KeystoresOptionsPanelComponent.class);
    private final RequestProcessor.Task checkPasswordTask;
    private final AtomicBoolean oldPasswordValid = new AtomicBoolean(false);
    private final ValidListener validListener = new ValidListener();

    @SuppressWarnings({"LeakingThisInConstructor"})
    KeystoresOptionsPanelComponent(KeystoresOptionsPanelController controller) {
        this.controller = controller;
        checkPasswordTask = RP.create(this);
        newPWListener = new DocListener(false);
        oldPWListener = new DocListener(true);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        newPasswordLabel = new javax.swing.JLabel();
        newPasswordField = new javax.swing.JPasswordField();
        repeatLabel = new javax.swing.JLabel();
        oldPasswordLabel = new javax.swing.JLabel();
        repeatPasswordField = new javax.swing.JPasswordField();
        oldPasswordField = new javax.swing.JPasswordField();
        storePasswordCheckbox = new javax.swing.JCheckBox();
        errorMessageLabel = new javax.swing.JLabel();
        updatePasswordCheckBox = new javax.swing.JCheckBox();
        newStoreButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(newPasswordLabel, org.openide.util.NbBundle.getMessage(KeystoresOptionsPanelComponent.class, "KeystoresOptionsPanelComponent.newPasswordField.text")); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, updatePasswordCheckBox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), newPasswordField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(repeatLabel, org.openide.util.NbBundle.getMessage(KeystoresOptionsPanelComponent.class, "KeystoresOptionsPanelComponent.repeatLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(oldPasswordLabel, org.openide.util.NbBundle.getMessage(KeystoresOptionsPanelComponent.class, "PasswordSettingsVisualPanel.passwordTextFieldLabel.text")); // NOI18N

        repeatPasswordField.setText(org.openide.util.NbBundle.getMessage(KeystoresOptionsPanelComponent.class, "KeystoresOptionsPanelComponent.repeatPasswordField.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, updatePasswordCheckBox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), repeatPasswordField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(storePasswordCheckbox, org.openide.util.NbBundle.getMessage(KeystoresOptionsPanelComponent.class, "PasswordSettingsVisualPanel.storeKeyStorePasswordCheckBox.text")); // NOI18N
        storePasswordCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storePasswordSelected(evt);
            }
        });

        errorMessageLabel.setForeground(javax.swing.UIManager.getDefaults().getColor("nb.errorForeground"));
        errorMessageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(javax.swing.UIManager.getDefaults().getColor("Panel.background"), 5));

        org.openide.awt.Mnemonics.setLocalizedText(updatePasswordCheckBox, org.openide.util.NbBundle.getMessage(KeystoresOptionsPanelComponent.class, "KeystoresOptionsPanelComponent.updatePasswordCheckBox.text")); // NOI18N
        updatePasswordCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePasswordSelected(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(newStoreButton, org.openide.util.NbBundle.getMessage(KeystoresOptionsPanelComponent.class, "KeystoresOptionsPanelComponent.newStoreButton.text")); // NOI18N
        newStoreButton.setEnabled(false);
        newStoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newStoreAction(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(storePasswordCheckbox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updatePasswordCheckBox)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(newStoreButton)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(newPasswordLabel)
                                        .addComponent(repeatLabel)
                                        .addComponent(oldPasswordLabel))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(repeatPasswordField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                        .addComponent(newPasswordField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                                        .addComponent(oldPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(errorMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(updatePasswordCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPasswordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(repeatPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(repeatLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newStoreButton)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oldPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(oldPasswordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(storePasswordCheckbox)
                .addGap(18, 18, 18)
                .addComponent(errorMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void updatePasswordSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePasswordSelected
        oldPasswordField.setEnabled(updatePasswordCheckBox.isSelected() || storePasswordCheckbox.isSelected());
        controller.changed();
    }//GEN-LAST:event_updatePasswordSelected

    private void storePasswordSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storePasswordSelected
        oldPasswordField.setEnabled(updatePasswordCheckBox.isSelected() || storePasswordCheckbox.isSelected());
        controller.changed();
    }//GEN-LAST:event_storePasswordSelected

    private void newStoreAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newStoreAction
        if (validListener.newStoreButtonEnabled()) {
            final String message = NbBundle.getMessage(KeystoresOptionsPanelComponent.class, "KeystoresOptionsPanelComponent.newStoreAction.userWarning");
            final NotifyDescriptor.Confirmation ndc = new NotifyDescriptor.Confirmation(message, NotifyDescriptor.WARNING_MESSAGE, NotifyDescriptor.OK_CANCEL_OPTION);
            if (DialogDisplayer.getDefault().notify(ndc) == NotifyDescriptor.OK_OPTION) {
                final char[] pw = newPasswordField.getPassword();
                try {
                    InstallKeyStores.createKeyStoreInstance(Arrays.copyOf(pw, pw.length));
                    InstallKeyStores.createTrustStoreInstance(Arrays.copyOf(pw, pw.length));
                    InstallKeyStores.createDefaultAppSecretInstance(Arrays.copyOf(pw, pw.length));
//                    InstallKeyStores.copyDefaultKeys(DEFAULT_KEY_ALIASES, InstallKeyStores.class.getResource("/org/thespheres/betula/services/ui/resources/keystore.jks"), pw);
                    if (storePasswordCheckbox.isSelected()) {
                        final String description = NbBundle.getMessage(KeyStores.class, "KeyStores.keyStore.password.description", new Date());
                        Keyring.save(KeyStores.KEYRING_KEYSTORE_PASSWORD_KEY, pw, description);
                    }
                } catch (IOException ioex) {
                    InstallKeyStores.logError(ioex);
                } finally {
                    Arrays.fill(pw, '0');
                }
            }
        }
    }//GEN-LAST:event_newStoreAction


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel errorMessageLabel;
    private javax.swing.JPasswordField newPasswordField;
    private javax.swing.JLabel newPasswordLabel;
    private javax.swing.JButton newStoreButton;
    private javax.swing.JPasswordField oldPasswordField;
    private javax.swing.JLabel oldPasswordLabel;
    private javax.swing.JLabel repeatLabel;
    private javax.swing.JPasswordField repeatPasswordField;
    private javax.swing.JCheckBox storePasswordCheckbox;
    private javax.swing.JCheckBox updatePasswordCheckBox;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    void load() {
        boolean hasStoredPassword = Keyring.read(KeyStores.KEYRING_KEYSTORE_PASSWORD_KEY) != null;
        storePasswordCheckbox.setSelected(hasStoredPassword);
        newPasswordField.getDocument().addDocumentListener(newPWListener);
        repeatPasswordField.getDocument().addDocumentListener(newPWListener);
        oldPasswordField.getDocument().addDocumentListener(oldPWListener);
        controller.addPropertyChangeListener(validListener);
    }

    boolean valid() {
        if (!storePasswordCheckbox.isSelected() && !updatePasswordCheckBox.isSelected()) {
            return true;
        }
        return (!updatePasswordCheckBox.isSelected() || newPasswordTextValid())
                && oldPasswordValid.get();
    }

    private boolean newPasswordTextValid() {
        boolean validPassword = newPasswordField.getPassword() != null && newPasswordField.getPassword().length > 0;
        boolean equalPasswords = repeatPasswordField.getPassword() != null && Arrays.equals(newPasswordField.getPassword(), repeatPasswordField.getPassword());
        return validPassword && equalPasswords;
    }

    void apply() {
        newPasswordField.getDocument().removeDocumentListener(newPWListener);
        repeatPasswordField.getDocument().removeDocumentListener(newPWListener);
        oldPasswordField.getDocument().removeDocumentListener(oldPWListener);
        controller.removePropertyChangeListener(validListener);
        if (!controller.isChanged()) {
            return;
        }
        if (updatePasswordCheckBox.isSelected() && valid()) {
            try {
                accessKeystore(oldPasswordField.getPassword(), newPasswordField.getPassword());
            } catch (KeyStoreException | IOException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
        if (storePasswordCheckbox.isSelected() && valid()) {
            final String description = NbBundle.getMessage(KeyStores.class, "KeyStores.keyStore.password.description", new Date());
            Keyring.save(KeyStores.KEYRING_KEYSTORE_PASSWORD_KEY, updatePasswordCheckBox.isSelected() ? newPasswordField.getPassword() : oldPasswordField.getPassword(), description);
        }
    }

    private void checkValid(boolean oldPassword) {
        if (oldPassword) {
            oldPasswordValid.set(false);
            checkPasswordTask.schedule(1500);
        }
        controller.changed();
    }

    @Override
    public void run() {
        controller.changed();
        try {
            accessKeystore(oldPasswordField.getPassword(), null);
            errorMessageLabel.setText(null);
            oldPasswordValid.set(true);
        } catch (KeyStoreException ex) {
            errorMessageLabel.setText(ex.getLocalizedMessage());
            oldPasswordValid.set(false);
        } catch (IOException ex) {
            errorMessageLabel.setText(ex.getLocalizedMessage());
            oldPasswordValid.set(false);
        }
    }

    private void accessKeystore(char[] password, char[] update) throws KeyStoreException, IOException {
        final KeyStore ks2 = KeyStore.getInstance(KeyStores.getKeystoreType());
        final Path p = Paths.get(KeyStores.getKeystore());
        try (InputStream is = Files.newInputStream(p)) {
            ks2.load(is, password);
        } catch (NoSuchAlgorithmException | CertificateException ex) {
            throw new IllegalStateException(ex);
        }
        if (update != null) {
            KeyStores.storeKeyStore(ks2, p, update);
        }
    }

    private class ValidListener implements PropertyChangeListener {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if (KeystoresOptionsPanelController.PROP_VALID.equals(evt.getPropertyName())) {
                EventQueue.invokeLater(() -> newStoreButton.setEnabled(newStoreButtonEnabled()));
            }
        }

        boolean newStoreButtonEnabled() {
            return updatePasswordCheckBox.isSelected() && newPasswordTextValid();
        }

    }

    private class DocListener implements DocumentListener {

        private final boolean passwordField;

        private DocListener(boolean passwordField) {
            this.passwordField = passwordField;
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            checkValid(passwordField);
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            checkValid(passwordField);
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            checkValid(passwordField);
        }

    }

}
