/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.betula.services.ui.ks;

import com.google.common.io.Resources;
import java.io.IOException;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.prefs.PreferenceChangeEvent;
import java.util.prefs.PreferenceChangeListener;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import org.openide.WizardDescriptor;
import org.openide.util.ChangeSupport;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;
import org.thespheres.betula.services.ui.Privacy;

@Messages({"PrivacyVisualPanel.step.name=Datenschutz"})
final class PrivacyVisualPanel extends JPanel {

    private PrivacyVisualPanel() {
        try {
            URL general = PrivacyVisualPanel.class.getResource("/org/thespheres/betula/services/ui/ks/privacy_general.html");
            URL agree = PrivacyVisualPanel.class.getResource("/org/thespheres/betula/services/ui/ks/privacy_agreement.html");
            initComponents();
            privacyInfoLabel.setText(Resources.toString(general, Charset.forName("utf-8")));
            isPrivateLabel.setText(Resources.toString(agree, Charset.forName("utf-8")));
        } catch (IOException ex) {
            throw new IllegalStateException(ex);
        }
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(PrivacyVisualPanel.class, "PrivacyVisualPanel.step.name");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        privacyInfoLabel = new org.jdesktop.swingx.JXLabel();
        isPrivateCheckBox = new javax.swing.JCheckBox();
        isPrivateLabel = new org.jdesktop.swingx.JXLabel();

        setPreferredSize(new java.awt.Dimension(300, 300));

        privacyInfoLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        privacyInfoLabel.setLineWrap(true);

        org.openide.awt.Mnemonics.setLocalizedText(isPrivateCheckBox, org.openide.util.NbBundle.getMessage(PrivacyVisualPanel.class, "PrivacyVisualPanel.isPrivateCheckBox.text")); // NOI18N
        isPrivateCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                privacyCheckBoxSelected(evt);
            }
        });

        isPrivateLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        isPrivateLabel.setLineWrap(true);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, isPrivateCheckBox, org.jdesktop.beansbinding.ELProperty.create("${selected}"), isPrivateLabel, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(privacyInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(isPrivateCheckBox)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(isPrivateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(privacyInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(isPrivateCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(isPrivateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void privacyCheckBoxSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_privacyCheckBoxSelected
        final String value = isPrivateCheckBox.isSelected() ? "yes" : "no";
        NbPreferences.forModule(Privacy.class).put(Privacy.IS_PRIVACY_NOTICE_KEY, value);
    }//GEN-LAST:event_privacyCheckBoxSelected

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox isPrivateCheckBox;
    private org.jdesktop.swingx.JXLabel isPrivateLabel;
    private org.jdesktop.swingx.JXLabel privacyInfoLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
 static class PrivacyPanel implements WizardDescriptor.Panel<WizardDescriptor>, PreferenceChangeListener {

        /**
         * The visual component that displays this panel. If you need to access
         * the component from this class, just use getComponent().
         */
        private PrivacyVisualPanel component;
        private boolean panelValid = false;
        private final ChangeSupport cSupport = new ChangeSupport(this);

        // Get the visual component for the panel. In this template, the component
        // is kept separate. This can be more efficient: if the wizard is created
        // but never displayed, or not all panels are displayed, it is better to
        // create only those which really need to be visible.
        @Override
        public PrivacyVisualPanel getComponent() {
            if (component == null) {
                component = new PrivacyVisualPanel();
            }
            return component;
        }

        @Override
        public HelpCtx getHelp() {
            // Show no Help button for this panel:
            return HelpCtx.DEFAULT_HELP;
            // If you have context help:
            // return new HelpCtx("help.key.here");
        }

        @Override
        public boolean isValid() {
            return panelValid;
        }

        @Override
        public void addChangeListener(ChangeListener l) {
            cSupport.addChangeListener(l);
        }

        @Override
        public void removeChangeListener(ChangeListener l) {
            cSupport.addChangeListener(l);
        }

        @Override
        public void readSettings(WizardDescriptor wiz) {
            boolean selected = false;
            try {
                Privacy.okay();
                selected = true;
            } catch (IllegalStateException e) {
            }
            getComponent().isPrivateCheckBox.setSelected(selected);
            NbPreferences.forModule(Privacy.class).addPreferenceChangeListener(this);
            updateValid();
        }

        @Override
        public void storeSettings(WizardDescriptor wiz) {
        }

        @Override
        public void preferenceChange(PreferenceChangeEvent evt) {
            if (Privacy.IS_PRIVACY_NOTICE_KEY.equals(evt.getKey())) {
                updateValid();
            }
        }

        private void updateValid() {
            boolean old = panelValid;
            try {
                Privacy.okay();
                panelValid = true;
            } catch (IllegalStateException e) {
                panelValid = false;
            }
            if (old != panelValid) {
                cSupport.fireChange();
            }
        }

    }
}
