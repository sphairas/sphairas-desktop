package org.thespheres.betula.services.ui.util;

import javax.swing.DefaultComboBoxModel;
import javax.swing.event.ChangeListener;
import org.jdesktop.swingx.renderer.DefaultListRenderer;
import org.jdesktop.swingx.renderer.StringValue;
import org.openide.WizardDescriptor;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.thespheres.betula.services.LocalProperties;
import org.thespheres.betula.services.scheme.spi.Term;

/**
 *
 * @author boris.heithecker
 */
@Messages({"ExportTargetAssessmentVisualPanel.terms.noTermLabel=Ohne Halbjahresangabe exportieren"})
public class ExportTargetAssessmentVisualPanel extends javax.swing.JPanel {

    private final String noTermLabel = NbBundle.getMessage(ExportTargetAssessmentVisualPanel.class, "ExportTargetAssessmentVisualPanel.terms.noTermLabel");
    private final StringValue termsStringValue = o -> o instanceof Term ? ((Term) o).getDisplayName() : noTermLabel;
    private final DefaultComboBoxModel termBoxModel = new DefaultComboBoxModel();

    ExportTargetAssessmentVisualPanel() {
        initComponents();
        termsBox.setModel(termBoxModel);
        termsBox.setRenderer(new DefaultListRenderer(termsStringValue));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        unitTextField = new org.jdesktop.swingx.JXTextField();
        unitLabel = new org.jdesktop.swingx.JXLabel();
        targetLabel = new org.jdesktop.swingx.JXLabel();
        targetTextField = new org.jdesktop.swingx.JXTextField();
        termLabel = new org.jdesktop.swingx.JXLabel();
        termsBox = new org.jdesktop.swingx.JXComboBox();
        signCheckBox = new javax.swing.JCheckBox();

        unitTextField.setEditable(false);

        org.openide.awt.Mnemonics.setLocalizedText(unitLabel, org.openide.util.NbBundle.getMessage(ExportTargetAssessmentVisualPanel.class, "ExportTargetAssessmentVisualPanel.unitLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(targetLabel, org.openide.util.NbBundle.getMessage(ExportTargetAssessmentVisualPanel.class, "ExportTargetAssessmentVisualPanel.targetLabel.text")); // NOI18N

        targetTextField.setEditable(false);

        org.openide.awt.Mnemonics.setLocalizedText(termLabel, org.openide.util.NbBundle.getMessage(ExportTargetAssessmentVisualPanel.class, "ExportTargetAssessmentVisualPanel.termLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(signCheckBox, org.openide.util.NbBundle.getMessage(ExportTargetAssessmentVisualPanel.class, "ExportTargetAssessmentVisualPanel.signCheckBox.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(unitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(targetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(termLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(unitTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(termsBox, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                    .addComponent(targetTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(signCheckBox))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(targetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(targetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(termLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(termsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(signCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox signCheckBox;
    private org.jdesktop.swingx.JXLabel targetLabel;
    private org.jdesktop.swingx.JXTextField targetTextField;
    private org.jdesktop.swingx.JXLabel termLabel;
    private org.jdesktop.swingx.JXComboBox termsBox;
    private org.jdesktop.swingx.JXLabel unitLabel;
    private org.jdesktop.swingx.JXTextField unitTextField;
    // End of variables declaration//GEN-END:variables

    public static class ExportTargetAssessmentPanel implements WizardDescriptor.Panel<TargetAssessmentExport> {

        private ExportTargetAssessmentVisualPanel component;

        @Override
        public ExportTargetAssessmentVisualPanel getComponent() {
            if (component == null) {
                component = new ExportTargetAssessmentVisualPanel();
            }
            return component;
        }

        @Override
        public HelpCtx getHelp() {
            return HelpCtx.DEFAULT_HELP;
        }

        @Override
        public void readSettings(TargetAssessmentExport settings) {
            final ExportTargetAssessmentVisualPanel c = getComponent();
            c.unitTextField.setText(settings.getUnit().getDisplayName());
            c.targetTextField.setText(settings.getTargetNameResolved());
            c.termBoxModel.removeAllElements();
            c.termBoxModel.addElement(settings.getSelectedTerm());
        }

        @Override
        public void storeSettings(TargetAssessmentExport settings) {
            final ExportTargetAssessmentVisualPanel c = getComponent();
            final Term sel = (Term) c.termsBox.getSelectedItem();
            settings.setSelectedTerm(sel);
            final boolean sign = c.signCheckBox.isSelected();
            if (sign) {
                final LocalProperties prop = LocalProperties.find(settings.getProvider());
                final String alias = AppProperties.privateKeyAlias(prop, settings.getProvider());
                settings.setSignAlias(alias);
            }
        }

        @Override
        public boolean isValid() {
            return true;
        }

        @Override
        public void addChangeListener(ChangeListener l) {
        }

        @Override
        public void removeChangeListener(ChangeListener l) {
        }

    }
}
