/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.betula.termreport.wizard;

import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.WizardDescriptor;
import org.openide.util.ChangeSupport;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;

@Messages({"CreateTermReportFileVisualPanel.step=Datei"})
final class CreateTermReportFileVisualPanel extends JPanel {

    public CreateTermReportFileVisualPanel() {
        initComponents();
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(CreateTermReportFileVisualPanel.class, "CreateTermReportFileVisualPanel.step");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 349, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 128, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    static class CreateTermReportFilePanel implements WizardDescriptor.Panel, DocumentListener {

        /**
         * The visual component that displays this panel. If you need to access
         * the component from this class, just use getComponent().
         */
        private CreateTermReportFileVisualPanel component;
        private final ChangeSupport cSupport = new ChangeSupport(this);

        // Get the visual component for the panel. In this template, the component
        // is kept separate. This can be more efficient: if the wizard is created
        // but never displayed, or not all panels are displayed, it is better to
        // create only those which really need to be visible.
        @Override
        public CreateTermReportFileVisualPanel getComponent() {
            if (component == null) {
                component = new CreateTermReportFileVisualPanel();
            }
            return component;
        }

        @Override
        public HelpCtx getHelp() {
            // Show no Help button for this panel:
            return HelpCtx.DEFAULT_HELP;
            // If you have context help:
            // return new HelpCtx(SampleWizardPanel1.class);
        }

        @Override
        public boolean isValid() {
            return true;
        }

        // If something changes dynamically (besides moving between panels), e.g.
        // the number of panels changes in response to user input, then uncomment
        // the following and call when needed: fireChangeEvent();
        @Override
        public final void addChangeListener(ChangeListener l) {
            cSupport.addChangeListener(l);
        }

        @Override
        public final void removeChangeListener(ChangeListener l) {
            cSupport.removeChangeListener(l);
        }

        // You can use a settings object to keep track of state. Normally the
        // settings object will be the WizardDescriptor, so you can use
        // WizardDescriptor.getProperty & putProperty to store information entered
        // by the user.
        @Override
        public void readSettings(Object settings) {
        }

        @Override
        public void storeSettings(Object settings) {
        }

        protected void fireChange() {
            cSupport.fireChange();
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            fireChange();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            fireChange();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            fireChange();
        }
    }
}
