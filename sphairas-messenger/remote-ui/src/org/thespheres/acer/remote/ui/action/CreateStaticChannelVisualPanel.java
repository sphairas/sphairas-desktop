/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.acer.remote.ui.action;

import java.util.regex.Pattern;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.openide.WizardDescriptor;
import org.openide.util.ChangeSupport;
import org.openide.util.NbBundle;

@NbBundle.Messages({"CreateStaticChannelVisualPanel.step=Unterzeichner auswählen",
    "CreateStaticChannelVisualPanel.errorChannelName=Der Adressatenlisten-Name enthält ungültige Zeichen.",
    "CreateStaticChannelVisualPanel.errorChannelDisplayName=Der Anzeigename darf nicht leer sein."
})
final class CreateStaticChannelVisualPanel extends JPanel implements DocumentListener {

    private final ChangeSupport cSupport = new ChangeSupport(this);
    private boolean nameValid = false;
    private boolean dnValid = false;
    private final static Pattern namePattern = Pattern.compile("[\\p{Alpha}\\p{Digit}]+[-[\\p{Alpha}\\p{Digit}]+]*");
    private WizardDescriptor wizard;

    @SuppressWarnings("LeakingThisInConstructor")
    CreateStaticChannelVisualPanel() {
        initComponents();
        channelNameTextField.getDocument().addDocumentListener(this);
        channelDisplayNameTextField.getDocument().addDocumentListener(this);
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(CreateStaticChannelVisualPanel.class, "CreateStaticChannelVisualPanel.step");
    }

    boolean valid() {
        return nameValid && dnValid;
    }

    private void checkValid(Document source) {
        boolean before = valid();
        if (source == channelNameTextField.getDocument()) {
            nameValid = namePattern.matcher(getChannelName()).matches();
            String msg = null;
            if (!nameValid) {
                msg = NbBundle.getMessage(CreateStaticChannelVisualPanel.class, "CreateStaticChannelVisualPanel.errorChannelName");
            }
            if (wizard != null) {
                wizard.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, msg);
            }
        } else if (source == channelDisplayNameTextField.getDocument()) {
            dnValid = !getChannelDisplayName().isEmpty();
            String msg = null;
            if (!dnValid) {
                msg = NbBundle.getMessage(CreateStaticChannelVisualPanel.class, "CreateStaticChannelVisualPanel.errorChannelDisplayName");
            }
            if (wizard != null) {
                wizard.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, msg);
            }
        }
        if (before != valid()) {
            cSupport.fireChange();
        }
    }

    void setWizardDescriptor(WizardDescriptor wiz) {
        this.wizard = wiz;
    }

    String getChannelName() {
        return channelNameTextField.getText().trim();
    }

    void setChannelName(String name) {
        channelNameTextField.setText(name);
    }

    String getChannelDisplayName() {
        return channelDisplayNameTextField.getText().trim();
    }

    void setChannelDisplayName(String dn) {
        channelDisplayNameTextField.setText(dn);
    }

    boolean isStudentsChannel() {
        return studentsChannelCheckBox.isSelected();
    }

    void setStudentsChannel(boolean studentsChannel) {
        studentsChannelCheckBox.setSelected(studentsChannel);
    }

    void addChangeListener(ChangeListener listener) {
        cSupport.addChangeListener(listener);
    }

    void removeChangeListener(ChangeListener listener) {
        cSupport.removeChangeListener(listener);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        channelNameLabel = new javax.swing.JLabel();
        channelNameTextField = new javax.swing.JTextField();
        channelDisplayNameLabel = new javax.swing.JLabel();
        channelDisplayNameTextField = new javax.swing.JTextField();
        studentsChannelCheckBox = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(channelNameLabel, org.openide.util.NbBundle.getMessage(CreateStaticChannelVisualPanel.class, "CreateStaticChannelVisualPanel.channelNameLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(channelDisplayNameLabel, org.openide.util.NbBundle.getMessage(CreateStaticChannelVisualPanel.class, "CreateStaticChannelVisualPanel.channelDisplayNameLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(studentsChannelCheckBox, org.openide.util.NbBundle.getMessage(CreateStaticChannelVisualPanel.class, "CreateStaticChannelVisualPanel.studentsChannelCheckBox.text")); // NOI18N
        studentsChannelCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentsChannelCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(channelDisplayNameLabel)
                            .addComponent(channelNameLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(channelNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                            .addComponent(channelDisplayNameTextField)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(studentsChannelCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(channelNameLabel)
                    .addComponent(channelNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(channelDisplayNameLabel)
                    .addComponent(channelDisplayNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(studentsChannelCheckBox)
                .addContainerGap(186, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void studentsChannelCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentsChannelCheckBoxActionPerformed
        if (wizard != null) {

        }
    }//GEN-LAST:event_studentsChannelCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel channelDisplayNameLabel;
    private javax.swing.JTextField channelDisplayNameTextField;
    private javax.swing.JLabel channelNameLabel;
    private javax.swing.JTextField channelNameTextField;
    private javax.swing.JCheckBox studentsChannelCheckBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void insertUpdate(DocumentEvent e) {
        checkValid(e.getDocument());
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        checkValid(e.getDocument());
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        checkValid(e.getDocument());
    }
}
