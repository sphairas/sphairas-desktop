/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.betula.curriculumimport;

import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.apache.commons.lang3.StringUtils;
import org.jdesktop.swingx.renderer.DefaultListRenderer;
import org.openide.WizardDescriptor;
import org.openide.util.ChangeSupport;
import org.openide.util.HelpCtx;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.thespheres.betula.xmlimport.ImportTargetFactory;
import org.thespheres.betula.xmlimport.model.Product;
import org.thespheres.betula.xmlimport.uiutil.AbstractFileImportAction;
import org.thespheres.betula.xmlimport.uiutil.ImportProviderComboBoxModel;
import org.thespheres.betula.xmlimport.utilities.ConfigurableImportTarget;

/**
 *
 * @author boris.heithecker
 */
@Messages({"CreateCurriculumWizardTargetPanel.invalidName=Die Datei {0} existiert bereits."})
class CreateCurriculumWizardTargetVisualPanel extends javax.swing.JPanel {

    private final ImportProviderComboBoxModel<ConfigurableImportTarget> providerModel = new ImportProviderComboBoxModel<>();
//    private final Set<String> knownNames = new HashSet<>();
    private WizardDescriptor descriptor;
    private final ChangeSupport cSupport = new ChangeSupport(this);
//    private boolean invalidNameChosen = true;
    private final Listener docListener = new Listener();

    public CreateCurriculumWizardTargetVisualPanel() {
        initComponents();
        Lookup.getDefault().lookupAll(ImportTargetFactory.class).stream()
                .filter(ConfigurableImportTarget.Factory.class::isInstance)
                .map(ConfigurableImportTarget.Factory.class::cast)
                .filter(sbit -> sbit.getProduct() == null || sbit.getProduct().equals(Product.NO))
                .flatMap(sbit -> sbit.available(ConfigurableImportTarget.class).stream())
                .forEach(providerModel::addElement);
        this.providerComboBox.setRenderer(new DefaultListRenderer(providerModel));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        providerLabel = new javax.swing.JLabel();
        providerComboBox = new org.jdesktop.swingx.JXComboBox();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new org.jdesktop.swingx.JXTextField();

        org.openide.awt.Mnemonics.setLocalizedText(providerLabel, org.openide.util.NbBundle.getMessage(CreateCurriculumWizardTargetVisualPanel.class, "CreateCurriculumWizardTargetVisualPanel.providerLabel.text")); // NOI18N

        providerComboBox.setModel(providerModel);
        providerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                providerSelected(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(CreateCurriculumWizardTargetVisualPanel.class, "CreateCurriculumWizardTargetVisualPanel.nameLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(providerLabel)
                    .addComponent(nameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(providerComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(providerLabel)
                    .addComponent(providerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(54, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void providerSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_providerSelected
        final ConfigurableImportTarget p = providerModel.findTarget();
//        CreateCurriculumWizardIterator.RP.post(() -> fetchNames(p.getProvider()));
    }//GEN-LAST:event_providerSelected

    void checkName() {
        final String text = StringUtils.trimToNull(nameTextField.getText());
        if (text == null && descriptor != null) {
            final String msg = NbBundle.getMessage(CreateCurriculumWizardTargetVisualPanel.class, "CreateCurriculumWizardTargetPanel.invalidName", text);
            descriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, msg);
        } else {
            descriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE, null);
        }
        cSupport.fireChange();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel nameLabel;
    private org.jdesktop.swingx.JXTextField nameTextField;
    private org.jdesktop.swingx.JXComboBox providerComboBox;
    private javax.swing.JLabel providerLabel;
    // End of variables declaration//GEN-END:variables

    void store(WizardDescriptor d) {
        nameTextField.getDocument().removeDocumentListener(docListener);
        final ConfigurableImportTarget p = providerModel.findTarget();
        d.putProperty(AbstractFileImportAction.IMPORT_TARGET, p);
        final String name = StringUtils.trimToNull(nameTextField.getText());
        d.putProperty(CreateCurriculumWizardIterator.PROP_NAME, name);
        descriptor = null;
    }

    void read(WizardDescriptor settings) {
        descriptor = settings;
        final ConfigurableImportTarget p = (ConfigurableImportTarget) settings.getProperty(AbstractFileImportAction.IMPORT_TARGET);
        if (p != null) {
            providerModel.setSelectedTarget(p);
        }
        final String name = (String) settings.getProperty(CreateCurriculumWizardIterator.PROP_NAME);
        if (name != null) {
            nameTextField.setText(name);
        }
        nameTextField.getDocument().addDocumentListener(docListener);
        providerSelected(null);
    }

    public void addChangeListener(ChangeListener listener) {
        cSupport.addChangeListener(listener);
    }

    public void removeChangeListener(ChangeListener listener) {
        cSupport.removeChangeListener(listener);
    }

    private class Listener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            checkName();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            checkName();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            checkName();
        }

    }

    static class CreateCurriculumWizardTargetPanel implements WizardDescriptor.Panel<WizardDescriptor> {

        /**
         * The visual component that displays this panel. If you need to access
         * the component from this class, just use getComponent().
         */
        private CreateCurriculumWizardTargetVisualPanel component;

        // Get the visual component for the panel. In this template, the component
        // is kept separate. This can be more efficient: if the wizard is created
        // but never displayed, or not all panels are displayed, it is better to
        // create only those which really need to be visible.
        @Override
        public CreateCurriculumWizardTargetVisualPanel getComponent() {
            if (component == null) {
                component = new CreateCurriculumWizardTargetVisualPanel();
            }
            return component;
        }

        @Override
        public HelpCtx getHelp() {
            // Show no Help button for this panel:
            return HelpCtx.DEFAULT_HELP;
            // If you have context help:
            // return new HelpCtx("help.key.here");
        }

        @Override
        public boolean isValid() {
//            return !getComponent().invalidNameChosen
//                    && !StringUtils.isBlank(getComponent().nameTextField.getText());
            return !StringUtils.isBlank(getComponent().nameTextField.getText());
        }

        @Override
        public void addChangeListener(ChangeListener l) {
            getComponent().addChangeListener(l);
        }

        @Override
        public void removeChangeListener(ChangeListener l) {
            getComponent().removeChangeListener(l);
        }

        @Override
        public void readSettings(WizardDescriptor wiz) {
            getComponent().read(wiz);
            // use wiz.getProperty to retrieve previous panel state
        }

        @Override
        public void storeSettings(WizardDescriptor wiz) {
            getComponent().store(wiz);
        }

    }

}
