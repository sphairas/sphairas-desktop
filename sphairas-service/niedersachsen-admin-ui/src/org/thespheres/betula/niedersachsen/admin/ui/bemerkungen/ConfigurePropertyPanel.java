/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.betula.niedersachsen.admin.ui.bemerkungen;

import java.awt.EventQueue;
import java.awt.Insets;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.Arrays;
import java.util.logging.Level;
import javax.swing.Action;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import org.openide.util.RequestProcessor;
import org.openide.windows.TopComponent;
import org.thespheres.betula.niedersachsen.admin.ui.bemerkungen.EditBemerkungenPropertiesComponentTableModel.PropertyNode;
import org.thespheres.betula.ui.util.PlatformUtil;
import org.thespheres.betula.util.CollectionUtil;

/**
 *
 * @author boris.heithecker
 */
public class ConfigurePropertyPanel extends javax.swing.JPanel implements Runnable, PropertyChangeListener {

    private final RequestProcessor RP = new RequestProcessor();
    private final RequestProcessor.Task update;
    static int DELAY = 500;
    private final DocListener listener = new DocListener();
    private PropertyNode current;
//    private final Lookup.Result<PropertyNode> context;
    private final EditBemerkungenPropertiesComponent tc;

    @SuppressWarnings(value = {"LeakingThisInConstructor"})
    ConfigurePropertyPanel(EditBemerkungenPropertiesComponent parent) {
        initComponents();
        this.tc = parent;
        this.update = RP.create(this);
        this.editTextArea.getDocument().addDocumentListener(listener);
//        context = tc.getLookup().lookupResult(PropertyNode.class);
//        context.addLookupListener(this);
        tc.addPropertyChangeListener(this);
    }

    void setActions() throws IOException {
        final Action[] ac = ArgumentsAction.createActions(editTextArea);
        Arrays.stream(ac)
                .map(paletteToolBar::add)
                .forEach(this::configureActionButton);
    }

    private void configureActionButton(final JButton b) {
        final Border border = BorderFactory.createCompoundBorder(
                BorderFactory.createEmptyBorder(2, 2, 2, 2),
                BorderFactory.createLineBorder(UIManager.getColor("Panel.foreground"), 1, true));
        b.setBorder(border);
        b.setMargin(new Insets(2, 2, 2, 2));
        b.setFocusable(false);
        b.setRequestFocusEnabled(false);
    }

    void setCurrent(final PropertyNode n) {
        EventQueue.invokeLater(() -> {
            this.current = n;
            this.editTextArea.setText(n.getEditValue());
        });
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (TopComponent.Registry.PROP_ACTIVATED_NODES.equals(evt.getPropertyName())) {
            Arrays.stream(tc.getActivatedNodes())
                    .filter(PropertyNode.class::isInstance)
                    .map(PropertyNode.class::cast)
                    .collect(CollectionUtil.singleton())
                    .ifPresent(this::setCurrent);
        }
    }

    @Override
    public void run() {
        final Document d = editTextArea.getDocument();
        final String text;
        try {
            text = d.getText(0, d.getLength());
        } catch (BadLocationException ex) {
            PlatformUtil.getCodeNameBaseLogger(ConfigurePropertyPanel.class).log(Level.WARNING, ex.getLocalizedMessage(), ex);
            return;
        }
        if (current != null) {
            current.setEditValue(text);
        }
        final Object[] args = ReportContextListener.getDefault().getCurrentFormatArgs();
        final String res;
        try {
            res = MessageFormat.format(current != null ? current.getEditValue() : text, args);
        } catch (Exception ex) {
            PlatformUtil.getCodeNameBaseLogger(ConfigurePropertyPanel.class).log(Level.WARNING, ex.getLocalizedMessage(), ex);
            return;
        }
        EventQueue.invokeLater(() -> previewTextField.setText(res));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolsPanel = new javax.swing.JPanel();
        previewTextField = new javax.swing.JTextField();
        paletteToolBar = new javax.swing.JToolBar();
        editPane = new javax.swing.JScrollPane();
        editTextArea = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        toolsPanel.setLayout(new java.awt.BorderLayout());

        previewTextField.setEditable(false);
        toolsPanel.add(previewTextField, java.awt.BorderLayout.NORTH);

        paletteToolBar.setFloatable(false);
        paletteToolBar.setRollover(true);
        toolsPanel.add(paletteToolBar, java.awt.BorderLayout.CENTER);

        add(toolsPanel, java.awt.BorderLayout.NORTH);

        editTextArea.setColumns(20);
        editTextArea.setRows(5);
        editPane.setViewportView(editTextArea);

        add(editPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane editPane;
    private javax.swing.JTextArea editTextArea;
    private javax.swing.JToolBar paletteToolBar;
    private javax.swing.JTextField previewTextField;
    private javax.swing.JPanel toolsPanel;
    // End of variables declaration//GEN-END:variables

    private class DocListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            update.schedule(DELAY);
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            update.schedule(DELAY);
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            update.schedule(DELAY);
        }

    }

}
