/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.betula.niedersachsen.admin.ui.docsrv;

import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import org.jdesktop.swingx.renderer.DefaultListRenderer;
import org.jdesktop.swingx.renderer.StringValue;
import org.openide.WizardDescriptor;
import org.openide.util.HelpCtx;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.thespheres.betula.services.scheme.spi.Term;
import org.thespheres.betula.services.WorkingDate;

/**
 *
 * @author boris.heithecker
 */
@Messages({"DownloadSelectActionPanel.step.name=Auswahl"})
class DownloadSelectActionPanel extends JPanel implements StringValue {

    final DefaultComboBoxModel<Term> termBoxModel = new DefaultComboBoxModel<>();
    final DefaultComboBoxModel<PrimaryUnitDownloadAction> delegateBoxModel = new DefaultComboBoxModel<>();
    private final StringValue termStringValue = v -> v instanceof Term ? ((Term) v).getDisplayName() : " ";

    private DownloadSelectActionPanel() {
        initComponents();
        termComboBox.setRenderer(new DefaultListRenderer(termStringValue));
        delegateComboBox.setRenderer(new DefaultListRenderer(this));
    }

    @Override
    public String getString(Object value) {
        final PrimaryUnitDownloadAction ac = (PrimaryUnitDownloadAction) value;
        return ac.getDisabledName();
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(DownloadSelectActionPanel.class, "DownloadSelectActionPanel.step.name");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        typeLabel = new javax.swing.JLabel();
        termLabel = new javax.swing.JLabel();
        delegateComboBox = new javax.swing.JComboBox<>();
        termComboBox = new javax.swing.JComboBox<>();

        org.openide.awt.Mnemonics.setLocalizedText(typeLabel, org.openide.util.NbBundle.getMessage(DownloadSelectActionPanel.class, "DownloadSelectActionPanel.typeLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(termLabel, org.openide.util.NbBundle.getMessage(DownloadSelectActionPanel.class, "DownloadSelectActionPanel.termLabel.text")); // NOI18N

        delegateComboBox.setModel(delegateBoxModel);

        termComboBox.setModel(termBoxModel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(typeLabel)
                    .addComponent(termLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(termComboBox, 0, 308, Short.MAX_VALUE)
                    .addComponent(delegateComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeLabel)
                    .addComponent(delegateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(termLabel)
                    .addComponent(termComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<PrimaryUnitDownloadAction> delegateComboBox;
    private javax.swing.JComboBox<Term> termComboBox;
    private javax.swing.JLabel termLabel;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables

    static class DownloadSelectActionPanelWizardPanel implements WizardDescriptor.Panel<WizardDescriptor> {

        private DownloadSelectActionPanel component;

        @Override
        public DownloadSelectActionPanel getComponent() {
            if (component == null) {
                component = new DownloadSelectActionPanel();
            }
            return component;
        }

        @Override
        public HelpCtx getHelp() {
            return HelpCtx.DEFAULT_HELP;
        }

        @Override
        public boolean isValid() {
            return true;
        }

        @Override
        public void addChangeListener(ChangeListener l) {
        }

        @Override
        public void removeChangeListener(ChangeListener l) {
        }

        @Override
        public void readSettings(WizardDescriptor wiz) {
            getComponent().delegateBoxModel.removeAllElements();
            final DownloadSelectAction ac = (DownloadSelectAction) wiz.getProperty(DownloadSelectAction.ACTION);
            ac.findDelegateActions().forEach(getComponent().delegateBoxModel::addElement);
            getComponent().termBoxModel.removeAllElements();
            ac.findSelectableTerms().forEach(getComponent().termBoxModel::addElement);
            Term t = (Term) wiz.getProperty(DownloadSelectAction.TERM);
            if (t == null) {
                final Date wd = Lookup.getDefault().lookup(WorkingDate.class).getCurrentWorkingDate();
                t = ac.termSchedule.getTerm(wd);
            }
            if (t != null) {
                getComponent().termBoxModel.setSelectedItem(t);
            }
            final PrimaryUnitDownloadAction del = (PrimaryUnitDownloadAction) wiz.getProperty(DownloadSelectAction.DELEGATE);
            if (del != null) {
                getComponent().termBoxModel.setSelectedItem(del);
            }
        }

        @Override
        public void storeSettings(WizardDescriptor wiz) {
            wiz.putProperty(DownloadSelectAction.TERM, (Term) getComponent().termBoxModel.getSelectedItem());
            wiz.putProperty(DownloadSelectAction.DELEGATE, (PrimaryUnitDownloadAction) getComponent().delegateBoxModel.getSelectedItem());
        }

    }

}
