/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.betula.niedersachsen.admin.ui.zgnimpl;

import java.awt.Component;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.apache.commons.lang3.StringUtils;
import org.jdesktop.swingx.renderer.DefaultListRenderer;
import org.jdesktop.swingx.renderer.StringValue;
import org.openide.WizardDescriptor;
import org.openide.util.ChangeSupport;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.thespheres.betula.niedersachsen.admin.ui.ReportData2;
import org.thespheres.betula.niedersachsen.admin.ui.ReportData2.ReportNote;
import org.thespheres.betula.niedersachsen.zeugnis.TermReportNoteSetTemplate;
import org.thespheres.betula.niedersachsen.zeugnis.TermReportNoteSetTemplate.Element;
import org.thespheres.betula.ui.util.WideJXComboBox;

@Messages({"CreateCustomNoteVisualPanel.name=Text und Position",
    "CreateCustomNoteVisualPanel.after.displayText=Unmittelbar nach:{0}",
    "CreateCustomNoteVisualPanel.start.displayText=An erster Stelle"})
final class CreateCustomNoteVisualPanel extends JPanel {

    private final CBModel cbm = new CBModel();
    final static Object START = new Object();
//    private RemoteReportsModel2 history;

    CreateCustomNoteVisualPanel() {
        initComponents();
        markerComboBox.setRenderer(new DefaultListRenderer(cbm));
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(CreateCustomNoteVisualPanel.class, "CreateCustomNoteVisualPanel.name");
    }

    static WizardDescriptor createCustomNoteDialog2(final ReportNote<String> cn, final ReportData2 s) {
        final List<WizardDescriptor.Panel<WizardDescriptor>> panels = new ArrayList<>();
        panels.add(new CreateCustomNoteWizardPanel());
        final String[] steps = new String[panels.size()];
        for (int i = 0; i < panels.size(); i++) {
            Component c = panels.get(i).getComponent();
            // Default step name to component name of panel.
            steps[i] = c.getName();
            if (c instanceof JComponent) { // assume Swing components
                JComponent jc = (JComponent) c;
                jc.putClientProperty(WizardDescriptor.PROP_CONTENT_SELECTED_INDEX, i);
                jc.putClientProperty(WizardDescriptor.PROP_CONTENT_DATA, steps);
                jc.putClientProperty(WizardDescriptor.PROP_AUTO_WIZARD_STYLE, true);
                jc.putClientProperty(WizardDescriptor.PROP_CONTENT_DISPLAYED, true);
                jc.putClientProperty(WizardDescriptor.PROP_CONTENT_NUMBERED, true);
            }
        }
        WizardDescriptor wiz = new WizardDescriptor(new WizardDescriptor.ArrayIterator<>(panels));
        // {0} will be replaced by WizardDesriptor.Panel.getComponent().getName()
        wiz.setTitleFormat(new MessageFormat("{0}"));
        wiz.setTitle(NbBundle.getMessage(CreateCustomNoteWizardPanel.class, "CreateCustomNoteWizardPanel.title"));
        wiz.putProperty(CreateCustomNoteWizardPanel.PROP_STUDENT, s);
        if (cn != null) {
            wiz.putProperty(CreateCustomNoteWizardPanel.PROP_NOTETEXT, cn.getValue());
            wiz.putProperty(CreateCustomNoteWizardPanel.PROP_POSITION, cn.getPosition());
        }
        return wiz;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        noteLabel = new javax.swing.JLabel();
        noteTextField = new javax.swing.JTextField();
        positionLabel = new javax.swing.JLabel();
        positionTextField = new javax.swing.JFormattedTextField();
        markerComboBox = new WideJXComboBox();

        noteLabel.setLabelFor(noteTextField);
        org.openide.awt.Mnemonics.setLocalizedText(noteLabel, org.openide.util.NbBundle.getMessage(CreateCustomNoteVisualPanel.class, "CreateCustomNoteVisualPanel.noteLabel.text")); // NOI18N

        positionLabel.setLabelFor(positionTextField);
        org.openide.awt.Mnemonics.setLocalizedText(positionLabel, org.openide.util.NbBundle.getMessage(CreateCustomNoteVisualPanel.class, "CreateCustomNoteVisualPanel.positionLabel.text")); // NOI18N

        positionTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        markerComboBox.setModel(cbm);
        markerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positionSelected(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(noteTextField)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(noteLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(positionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(markerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 615, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(positionTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noteLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(noteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(positionLabel)
                    .addComponent(markerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(positionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void positionSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positionSelected
        final Object sel = cbm.getSelectedItem();
        if (sel instanceof Element && cbm.template != null) {
            final int i = cbm.template.getElements().indexOf(sel);
            if (i != -1 && positionTextField.isEnabled()) {
                positionTextField.setValue(i);
            }
        } else if (sel == START && positionTextField.isEnabled()) {
            positionTextField.setValue(-1);
        }
    }//GEN-LAST:event_positionSelected

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXComboBox markerComboBox;
    private javax.swing.JLabel noteLabel;
    javax.swing.JTextField noteTextField;
    private javax.swing.JLabel positionLabel;
    javax.swing.JFormattedTextField positionTextField;
    // End of variables declaration//GEN-END:variables

    class CBModel extends DefaultComboBoxModel implements StringValue {

        private TermReportNoteSetTemplate template;

        void setTemplate(TermReportNoteSetTemplate t) {
            template = t;
        }

        protected void init(final Integer selected) {
            addElement(START);
            removeAllElements();
            if (template != null) {
                template.getElements().forEach(this::addElement);
            }
            if (selected != null) {
                try {
                    setSelectedItem(template.getElements().get(selected));
                } catch (final Exception e) {
                }
            }
            fireContentsChanged(this, 0, getSize() - 1);
        }

        @Override
        public String getString(Object o) {
            if (o instanceof Element) {
                final String mi = ((Element) o).getElementDisplayName();
                return NbBundle.getMessage(CreateCustomNoteVisualPanel.class, "CreateCustomNoteVisualPanel.after.displayText", mi);
            } else if (o == START) {
                return NbBundle.getMessage(CreateCustomNoteVisualPanel.class, "CreateCustomNoteVisualPanel.start.displayText");
            }
            return "";
        }

    }

    @Messages({"CreateCustomNoteWizardPanel.title=Freie Bemerkung"})
    static class CreateCustomNoteWizardPanel implements WizardDescriptor.Panel<WizardDescriptor>, DocumentListener {

        private CreateCustomNoteVisualPanel component;
        private final ChangeSupport cSupport = new ChangeSupport(this);
        private boolean valid;
        static final String PROP_NOTETEXT = "note.text";
        static final String PROP_POSITION = "position";
        static final String PROP_STUDENT = "model";

        @Override
        public CreateCustomNoteVisualPanel getComponent() {
            if (component == null) {
                component = new CreateCustomNoteVisualPanel();
            }
            return component;
        }

        @Override
        public HelpCtx getHelp() {
            // Show no Help button for this panel:
            return HelpCtx.DEFAULT_HELP;
            // If you have context help:
            // return new HelpCtx("help.key.here");
        }

        private void validate() {
            Number pos = getPosition();
            boolean before = valid;
            valid = (pos != null && pos.intValue() >= 0) && !StringUtils.isBlank(getNoteText());
            if (before != valid) {
                cSupport.fireChange();
            }
        }

        @Override
        public boolean isValid() {
            return valid;
        }

        private Number getPosition() {
            CreateCustomNoteVisualPanel panel = getComponent();
            return (Number) panel.positionTextField.getValue();
        }

        private String getNoteText() {
            CreateCustomNoteVisualPanel panel = getComponent();
            return panel.noteTextField.getText();
        }

        @Override
        public void addChangeListener(ChangeListener l) {
            cSupport.addChangeListener(l);
        }

        @Override
        public void removeChangeListener(ChangeListener l) {
            cSupport.removeChangeListener(l);
        }

        @Override
        public void readSettings(WizardDescriptor wiz) {
            // use wiz.getProperty to retrieve previous panel state
            final CreateCustomNoteVisualPanel panel = getComponent();
            panel.positionTextField.getDocument().addDocumentListener(this);
            panel.noteTextField.getDocument().addDocumentListener(this);
            String nText = (String) wiz.getProperty(PROP_NOTETEXT);
            if (nText != null) {
                panel.noteTextField.setText(nText);
            }
            Integer pos = (Integer) wiz.getProperty(PROP_POSITION);
            if (pos != null) {
                panel.positionTextField.setValue(pos);
                panel.positionTextField.setEnabled(false);
                panel.markerComboBox.setEnabled(false);
            } else {
                panel.positionTextField.setValue(Integer.MAX_VALUE);
            }
            final ReportData2 s = (ReportData2) wiz.getProperty(PROP_STUDENT);
            panel.cbm.setTemplate(s.getHistory().getTermReportNoteSetTemplate());
            panel.cbm.init(pos);
        }

        @Override
        public void storeSettings(WizardDescriptor wiz) {
            CreateCustomNoteVisualPanel panel = getComponent();
            panel.positionTextField.getDocument().removeDocumentListener(this);
            panel.noteTextField.getDocument().removeDocumentListener(this);
            wiz.putProperty(PROP_NOTETEXT, getNoteText());
            wiz.putProperty(PROP_POSITION, getPosition());
            // use wiz.putProperty to remember current panel state
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            validate();
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            validate();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            validate();
        }
    }
}
