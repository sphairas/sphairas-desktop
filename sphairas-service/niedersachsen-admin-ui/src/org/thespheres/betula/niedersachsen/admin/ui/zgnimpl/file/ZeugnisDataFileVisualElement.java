/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.betula.niedersachsen.admin.ui.zgnimpl.file;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.html.HTMLEditorKit;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Templates;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.filesystems.FileObject;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
        displayName = "#LBL_ZeugnisDataFile_VISUAL",
        iconBase = "org/thespheres/betula/niedersachsen/admin/ui/zgnimpl/file/rorange.png",
        mimeType = "text/zeugnis-sekundarstufe-niedersachsen+xml",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "ZeugnisDataFileVisual",
        position = 2000
)
@Messages("LBL_ZeugnisDataFile_VISUAL=Visual")
public final class ZeugnisDataFileVisualElement extends JPanel implements MultiViewElement {

    private final ZeugnisDataFileDataObject obj;
    private final HTMLEditorKit kit;
    private transient MultiViewElementCallback callback;
    private final Document htmlDocument;

    public ZeugnisDataFileVisualElement(Lookup lkp) {
        obj = lkp.lookup(ZeugnisDataFileDataObject.class);
        kit = new HTMLEditorKit();
        assert obj != null;
        initComponents();
        pane.setEditorKit(kit);
        htmlDocument = kit.createDefaultDocument();
        pane.setDocument(htmlDocument);
        try {
            setDoc();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
//        HTMLDocument d;
//        d.setParser(parser);
    }

    @Override
    public String getName() {
        return "ZeugnisDataFileVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolbar = new javax.swing.JToolBar();
        scrollPane = new javax.swing.JScrollPane();
        pane = new javax.swing.JEditorPane();

        setLayout(new java.awt.BorderLayout());

        toolbar.setRollover(true);
        add(toolbar, java.awt.BorderLayout.PAGE_START);

        scrollPane.setViewportView(pane);

        add(scrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane pane;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables
    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return obj.getLookup();
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
    }

    @Override
    public void componentHidden() {
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

    private static Object fo2html;
    protected static final TransformerFactory TRANSFORMER_FACTORY = TransformerFactory.newInstance();

    public static synchronized Templates getXslFo2HtmlTemplate() throws IOException {
        if (fo2html == null) {
            final InputStream is = ZeugnisDataFileVisualElement.class.getResourceAsStream("fo2html.xsl");
            try {
                fo2html = TRANSFORMER_FACTORY.newTemplates(new StreamSource(is));
            } catch (TransformerConfigurationException ex) {
                fo2html = new IOException(ex);
            }
        }
        if (fo2html instanceof IOException) {
            throw (IOException) fo2html;
        }
        return (Templates) fo2html;
    }

    private void setDoc() throws IOException {

        final FileObject source = obj.getPrimaryFile();
        final byte[] xslfo;
        try (final InputStream is = source.getInputStream()) {
            xslfo = transform(new StreamSource(is), AbstractXml2PdfAction.getTemplate());
        }
        String s = new String(xslfo);
        System.out.println(s);
        try (final ByteArrayInputStream bais = new ByteArrayInputStream(xslfo)) {
            kit.read(bais, htmlDocument, 0);
        } catch (BadLocationException ex) {
            throw new IOException(ex);
        }
    }

    private byte[] transform(final Source src, final Templates transform) throws IOException {
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
            final Transformer transformer = transform.newTransformer();
            transformer.setParameter("versionParam", "2.0");
            final DOMResult xslfoResult = new DOMResult();
            transformer.transform(src, xslfoResult);
            final Result res = new StreamResult(baos);
            final Transformer transformer2 = getXslFo2HtmlTemplate().newTransformer();
            transformer2.setOutputProperty(OutputKeys.METHOD, "xml");
            transformer2.transform(new DOMSource(xslfoResult.getNode()), res);
        } catch (TransformerException ex) {
            throw new IOException(ex);
        } finally {
            try {
                baos.close();
            } catch (IOException ex) {
                throw ex;
            }
        }
        return baos.toByteArray();
    }
}
