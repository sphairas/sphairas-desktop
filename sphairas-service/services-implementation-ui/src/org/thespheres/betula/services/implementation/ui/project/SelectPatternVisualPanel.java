/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thespheres.betula.services.implementation.ui.project;

import java.awt.EventQueue;
import java.io.IOException;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import org.jdesktop.swingx.renderer.*;
import org.openide.WizardDescriptor;
import org.openide.util.ChangeSupport;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.thespheres.betula.services.implementation.ui.project.PatternProvider.PatternSelection;

@Messages({"SelectUnitTargetVisualPanel.name=Gruppe/Liste ausw√§hlen"})
class SelectPatternVisualPanel extends JPanel {

    private final DefaultComboBoxModel<PatternProvider> providerModel = new DefaultComboBoxModel<>();
    private final DefaultComboBoxModel<PatternSelection> patternModel = new DefaultComboBoxModel<>();
    private final StringValue providerStringValue = v -> v instanceof PatternProvider ? ((PatternProvider) v).getProviderInfo().getDisplayName() : " ";
    private final StringValue unitStringValue = v -> v instanceof PatternProvider.PatternSelection ? ((PatternProvider.PatternSelection) v).getDisplayName() : " ";
    private final SelectPatternPanel panel;

    @SuppressWarnings("LeakingThisInConstructor")
    private SelectPatternVisualPanel(SelectPatternPanel p) {
        panel = p;
        providerModel.addElement(null);
        patternModel.addElement(null);
        initComponents();
        providerComboBox.setRenderer(new DefaultListRenderer(providerStringValue));
        unitTargetComboBox.setRenderer(new DefaultListRenderer(unitStringValue));
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(SelectPatternPanel.class, "SelectUnitTargetVisualPanel.name");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        typeButtonGroup = new javax.swing.ButtonGroup();
        unitTargetLabel = new javax.swing.JLabel();
        unitTargetComboBox = new org.jdesktop.swingx.JXComboBox();
        projectProviderLabel = new javax.swing.JLabel();
        providerComboBox = new org.jdesktop.swingx.JXComboBox();

        unitTargetLabel.setLabelFor(unitTargetComboBox);
        org.openide.awt.Mnemonics.setLocalizedText(unitTargetLabel, org.openide.util.NbBundle.getMessage(SelectPatternVisualPanel.class, "SelectPatternVisualPanel.unitTargetLabel.text")); // NOI18N

        unitTargetComboBox.setModel(patternModel);

        projectProviderLabel.setLabelFor(unitTargetLabel);
        org.openide.awt.Mnemonics.setLocalizedText(projectProviderLabel, org.openide.util.NbBundle.getMessage(SelectPatternVisualPanel.class, "SelectPatternVisualPanel.projectProviderLabel.text")); // NOI18N

        providerComboBox.setModel(providerModel);
        providerComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSelectProvider(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(unitTargetLabel)
                    .addComponent(projectProviderLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(providerComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                    .addComponent(unitTargetComboBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectProviderLabel)
                    .addComponent(providerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unitTargetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unitTargetLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void onSelectProvider(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSelectProvider
        final PatternProvider sel = (PatternProvider) providerModel.getSelectedItem();
        EventQueue.invokeLater(() -> {
            patternModel.removeAllElements();
            patternModel.addElement(null);
            if (sel != null) {
                try {
                    sel.createList().forEach(patternModel::addElement);
                } catch (IOException ex) {
                }
            }
        });
    }//GEN-LAST:event_onSelectProvider

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel projectProviderLabel;
    org.jdesktop.swingx.JXComboBox providerComboBox;
    private javax.swing.ButtonGroup typeButtonGroup;
    org.jdesktop.swingx.JXComboBox unitTargetComboBox;
    private javax.swing.JLabel unitTargetLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addNotify() {
        super.addNotify();
        providerComboBox.requestFocus();
    }

    private void read(WizardDescriptor settings) {
        final List<PatternProvider> l = (List<PatternProvider>) settings.getProperty(BasePatternProjectWizardIterator.PROP_PROVIDER_LIST);
        providerModel.removeAllElements();
        providerModel.addElement(null);
        l.forEach(providerModel::addElement);
    }

    private void store(WizardDescriptor settings) {
        final PatternProvider p = (PatternProvider) providerModel.getSelectedItem();
        settings.putProperty(BasePatternProjectWizardIterator.PROP_PROVIDER, p);
        final PatternSelection sel = (PatternSelection) patternModel.getSelectedItem();
        settings.putProperty(BasePatternProjectWizardIterator.PROP_PATTERN, sel);
    }

    static class SelectPatternPanel implements WizardDescriptor.Panel<WizardDescriptor> {

        private SelectPatternVisualPanel component;
        private final ChangeSupport cSupport = new ChangeSupport(this);
        private final boolean valid = true;

        SelectPatternPanel() {
        }

        @Override
        public SelectPatternVisualPanel getComponent() {
            if (component == null) {
                component = new SelectPatternVisualPanel(this);
            }
            return component;
        }

        @Override
        public HelpCtx getHelp() {
            return HelpCtx.DEFAULT_HELP;
        }

        @Override
        public boolean isValid() {
            return valid;
        }

        @Override
        public final void addChangeListener(ChangeListener l) {
            cSupport.addChangeListener(l);
        }

        @Override
        public final void removeChangeListener(ChangeListener l) {
            cSupport.removeChangeListener(l);
        }

        @Override
        public void readSettings(WizardDescriptor settings) {
            getComponent().read(settings);
        }

        @Override
        public void storeSettings(WizardDescriptor settings) {
            getComponent().store(settings);
        }

    }
}
